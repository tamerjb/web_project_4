!function(){"use strict";class e{constructor(e,t){this._form=t,this._inputSelector=e.inputSelector,this._submitButtonSelector=e.submitButtonSelector,this._inactiveButtonClass=e.inactiveButtonClass,this._inputErrorClass=e.inputErrorClass,this._errorClass=e.errorClass}_showInputError(e){const t=this._form.querySelector("#".concat(e.id,"-error"));t.textContent=e.validationMessage,t.classList.add(this._errorClass),e.classList.add(this._inputErrorClass)}_hideInputError(e){const t=this._form.querySelector("#".concat(e.id,"-error"));t.textContent="",t.classList.remove(this._errorClass),e.classList.remove(this._inputErrorClass)}_checkInputValidity(e){e.validity.valid?this._hideInputError(e):this._showInputError(e)}_hasValidInputs(){return this._inputList.every((e=>e.validity.valid))}_setEventListeners(){this._inputList=Array.from(this._form.querySelectorAll(this._inputSelector)),this._button=this._form.querySelector(this._submitButtonSelector),this.toggleButton(),this._inputList.forEach((e=>{e.addEventListener("input",(()=>{this._checkInputValidity(e),this.toggleButton()})),this.resetValidation()}))}toggleButton(){this._hasValidInputs()?(this._button.disabled=!1,this._button.classList.remove(this._inactiveButtonClass)):(this._button.disabled=!0,this._button.classList.add(this._inactiveButtonClass))}enableValidation(){this._form.addEventListener("submit",(e=>e.preventDefault())),this._setEventListeners()}resetValidation(){this.toggleButton(),this._inputList.forEach((e=>{this._hideInputError(e)}))}}function t(e,t,s){return t in e?Object.defineProperty(e,t,{value:s,enumerable:!0,configurable:!0,writable:!0}):e[t]=s,e}class s{constructor(e,s,r,i){let{handleCardClick:o,handleCardDelete:n,handleLikeCard:a}=r;t(this,"_getCloneFromTemplate",(()=>document.querySelector(this._selector).content.querySelector(".card").cloneNode(!0))),t(this,"_setEventListeners",(()=>{this._likeButton.addEventListener("click",(()=>{this._handleLikeCard(this._id)})),this._image.addEventListener("click",(()=>{this._handleCardClick(this._id)})),this._deleteButton.addEventListener("click",(()=>{this._handleCardDelete(this._id)}))})),this._text=e.name,this._link=e.link,this._selector=s,this._handleCardClick=o,this._handleCardDelete=n,this._handleLikeCard=a,this._id=e._id,this._userId=i,this._ownerId=e.owner._id,this._likes=e.likes}likeCard(e){this._likeButton.classList.add("card__like-button_active"),this._likes=e,this._likeCount.textContent=this._likes.length}dislikeCard(e){this._likeButton.classList.remove("card__like-button_active"),this._likes=e,this._likeCount.textContent=this._likes.length}isLiked(){return this._likes.some((e=>e._id===this._userId))}removeCard(){this._element.remove(),this._element=null}generateCard(){return this._element=this._getCloneFromTemplate(),this._image=this._element.querySelector(".card__image"),this._element.querySelector(".card__info-title").textContent=this._text,this._image.src=this._link,this._image.alt="Place in ".concat(this._text),this._deleteButton=this._element.querySelector(".card__image-trash"),this._ownerId!==this._userId&&(this._deleteButton.style.display="none"),this._likeButton=this._element.querySelector(".card__like-button"),this._likeCount=this._element.querySelector(".card__like-count"),this._likeCount.textContent=this._likes.length,this.isLiked()&&this.likeCard(this._likes),this._setEventListeners(),this._element}}function r(e,t,s){return t in e?Object.defineProperty(e,t,{value:s,enumerable:!0,configurable:!0,writable:!0}):e[t]=s,e}class i{constructor(e){r(this,"_handleEscClose",(e=>{"Escape"===e.key&&this.close()})),r(this,"_overlayClose",(e=>{e.target.classList.contains("popup")&&this.close()})),this._popupElement=document.querySelector(e),this.close=this.close.bind(this)}open(){this._popupElement.classList.add("popup_opened"),document.addEventListener("keydown",this._handleEscClose),document.addEventListener("mousedown",this._overlayClose)}close(){this._popupElement.classList.remove("popup_opened"),document.removeEventListener("keydown",this._handleEscClose),document.removeEventListener("click",this._overlayClose)}setEventListeners(){this._popupElement.querySelector(".popup__close-button").addEventListener("click",(()=>{this.close()}))}}class o extends i{constructor(e,t){var s,r;super(e),r=()=>{super.close(),this._formElement.reset()},(s="close")in this?Object.defineProperty(this,s,{value:r,enumerable:!0,configurable:!0,writable:!0}):this[s]=r,this._submitHandler=t,this._formElement=this._popupElement.querySelector(".popup__form"),this._inputs=[...this._formElement.querySelectorAll(".form__input")]}_getInputValues(){const e={};return this._inputs.forEach((t=>{e[t.name]=t.value})),e}setInputValues(e){this._inputs.forEach((t=>{t.value=e[t.name]})),console.log(this._inputs)}setEventListeners(){this._formElement.addEventListener("submit",(e=>{e.preventDefault(),this._submitHandler(this._getInputValues()),this.close()})),super.setEventListeners()}}document.querySelector(".form");const n=document.querySelector(".profile"),a=(n.querySelector(".profile__name"),document.querySelector(".popup-edit-profile")),l=(n.querySelector(".profile__title"),form.querySelector(".form__input[name='name']"),form.querySelector(".form__input[name='title']"),document.querySelector(".cards").querySelector(".cards__list"),document.querySelector(".popup__form-type-add-place")),c=(l.querySelector(".form__input-type-place-name"),l.querySelector(".form__input-type-place-url"),document.querySelector(".popup-prev")),u=(c.querySelector(".popup__image"),c.querySelector(".popup__caption"),document.querySelector(".popup-place")),h=n.querySelector(".profile__edit-button"),_=n.querySelector(".profile__add-button"),d=(document.querySelectorAll(".popup__close-button"),document.querySelector(".profile__image-container")),p=document.querySelector(".popup__form_type_avatar"),m=(e,t)=>fetch(e,t).then((e=>e.ok?e.json():Promise.reject(e.statusText))).catch((e=>console.log())),v=new class{constructor(e){let{baseUrl:t,headers:s}=e;this._baseUrl=t,this._headers=s}getInitialCards(){return m("".concat(this._baseUrl,"/cards"),{headers:this._headers})}getUserInfo(){return m("".concat(this._baseUrl,"/users/me"),{headers:this._headers})}setUserInfo(e){let{name:t,about:s}=e;return console.log("test",{name:t,about:s}),m("".concat(this._baseUrl,"/users/me"),{headers:this._headers,method:"PATCH",body:JSON.stringify({name:t,about:s})})}createCard(e){return m("".concat(this._baseUrl,"/cards"),{headers:this._headers,method:"POST",body:JSON.stringify(e)})}deleteCard(e){return m("".concat(this._baseUrl,"/cards/").concat(e),{headers:this._headers,method:"DELETE"})}likeCard(e){return m("".concat(this._baseUrl,"/cards/likes/").concat(e),{headers:this._headers,method:"PUT"})}dislikeCard(e){return m("".concat(this._baseUrl,"/cards/likes/").concat(e),{headers:this._headers,method:"DELETE"})}setUserAvatar(e){return fetch("".concat(this._baseUrl,"/users/me/avatar"),{headers:this._headers,method:"PATCH",body:JSON.stringify({avatar:e})})}}({baseUrl:"https://around.nomoreparties.co/v1/cohort-3-en",headers:{authorization:"edde3a5c-b30d-40b0-99e9-6f72ee976ddf","Content-Type":"application/json"}}),f=new class{constructor(e,t){let{renderer:s}=e;this._renderer=s,this._container=document.querySelector(t)}renderItems(e){e.forEach((e=>{this._renderer(e)}))}addItem(e){this._container.prepend(e)}}({renderer:S},".cards__list");let b;Promise.all([v.getInitialCards(),v.getUserInfo()]).then((e=>{let[t,s]=e;b=s._id,f.renderItems(t),C.setUserInfo(s.name,s.title),C.setUserAvatar(s.avatar)})).then((()=>C.setAvatarVisible())).catch((e=>console.log(e)));const C=new class{constructor(e){let{nameSelector:t,jobSelector:s,avatarSelector:r}=e;this._profileName=document.querySelector(t),this._profileJob=document.querySelector(s),this._avatar=document.querySelector(r)}getUserInfo(){return{name:this._profileName.textContent,about:this._profileJob.textContent}}setUserInfo(e){let{name:t,about:s}=e;this._profileName.textContent=t,this._profileJob.textContent=s}setUserAvatar(e){this._avatar.src=e}setAvatarVisible(){this._avatar.style.visibility="visible"}}({nameSelector:".profile__name",jobSelector:".profile__title",avatarSelector:".profile__image"}),y={inputSelector:".form__input",submitButtonSelector:".form__button",inactiveButtonClass:"form__button_disabled",inputErrorClass:"form__input-error",errorClass:"form__input-error"},E=new e(y,a);E.enableValidation();const k=new e(y,u);k.enableValidation();const g=new e(y,p);function S(e){const t=function(e){const t=new s(e,"#card-template",{handleCardClick:()=>{L.open(e.link,e.name)},handleCardDelete:e=>{U.open(),U.setAction((()=>{v.deleteCard(e).then((e=>{t.removeCard()})).then((()=>{U.close()})).catch((e=>console.log(e)))}))},handleLikeCard:e=>{t.isLiked()?v.dislikeCard(e).then((e=>{t.dislikeCard(e.likes)})).catch((e=>console.log(e))):v.likeCard(e).then((e=>{t.likeCard(e.likes),console.log("res",e)})).catch((e=>console.log(e)))}},b);return t.generateCard()}(e);f.addItem(t)}g.enableValidation(),h.addEventListener("click",(()=>{const e=C.getUserInfo();q.setInputValues(e),E.enableValidation(),E.toggleButton(),q.open(),console.log("click")})),_.addEventListener("click",(()=>{I.open(),k.resetValidation()})),d.addEventListener("click",(()=>{g.resetFormButton(),w.open()}));const L=new class extends i{constructor(e){super(e),this._popupImage=this._popupElement.querySelector(".popup__image"),this._popupCaption=this._popupElement.querySelector(".popup__caption")}open(e,t){this._popupImage.src=e,this._popupImage.alt="A view of ".concat(t),this._popupCaption.textContent=t,super.open()}}(".popup-prev"),q=new o(".popup-edit-profile",(e=>{console.log("data =>",e),v.setUserInfo({name:e.name,about:e.title}).then((e=>{C.getUserInfo(),C.setUserInfo({name:e.name,about:e.about}),q.close()})).catch((e=>console.log(e)))})),I=new o(".popup-place",(e=>{v.createCard(e).then((e=>{S(e),I.close()})).catch((e=>console.log(e)))})),U=new class extends i{setAction(e){this._submitHandler=e}setEventListeners(){this._popupElement.addEventListener("submit",(e=>{e.preventDefault(),this._submitHandler()})),super.setEventListeners()}}(".popup-type-delete-card"),w=new o(".popup_type_avatar",(e=>{v.setUserAvatar(e.link).then((e=>{C.setUserAvatar(e.avatar),w.close()})).catch((e=>console.log(e)))}));L.setEventListeners(),q.setEventListeners(),I.setEventListeners(),U.setEventListeners(),w.setEventListeners()}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QUFjLGdCQUFpQnhELElBQ3RENkYsRUFBQUEsV0FDYzdGLEdBQ1hvRixNQUFNQyxJQUNMbUMsRUFBV25DLEdBQ1g0RCxFQUFhbkcsV0FFZDZDLE9BQU9DLEdBQVF4QixRQUFRQyxJQUFJdUIsUUFFMUJpRCxFQUFjLElJcFFiLGNBQThCbkcsRUFDakNvRyxVQUFVVSxHQUNObk0sS0FBS3lHLGVBQWlCMEYsRUFHMUJqRyxvQkFDSWxHLEtBQUs0RixjQUFjeEQsaUJBQWlCLFVBQVdJLElBQzNDQSxFQUFFQyxpQkFDRnpDLEtBQUt5RyxvQkFFVEgsTUFBTUosc0JKMFAwQiwyQkFDbEM0RixFQUFjLElBQUkzRixFQUFjLHNCQUF1QnhELElBRTNENkYsRUFBQUEsY0FDaUI3RixFQUFLb0IsTUFDbkJnRSxNQUFNQyxJQUNMdUMsRUFBU2hCLGNBQWN2QixFQUFJUCxRQUMzQnFFLEVBQVlyRyxXQUViNkMsT0FBT0MsR0FBUXhCLFFBQVFDLElBQUl1QixRQUdoQ2dELEVBQVdyRixvQkFDWHlGLEVBQVV6RixvQkFDVjBGLEVBQWExRixvQkFDYnNGLEVBQVl0RixvQkFDWjRGLEVBQVk1RixvQiIsInNvdXJjZXMiOlsid2VicGFjazovL3dlYl9wcm9qZWN0XzQvLi9zcmMvY29tcG9uZW50cy9Gb3JtVmFsaWRhdG9yLmpzIiwid2VicGFjazovL3dlYl9wcm9qZWN0XzQvLi9zcmMvY29tcG9uZW50cy9DYXJkLmpzIiwid2VicGFjazovL3dlYl9wcm9qZWN0XzQvLi9zcmMvY29tcG9uZW50cy9Qb3B1cC5qcyIsIndlYnBhY2s6Ly93ZWJfcHJvamVjdF80Ly4vc3JjL2NvbXBvbmVudHMvUG9wdXBXaXRoRm9ybS5qcyIsIndlYnBhY2s6Ly93ZWJfcHJvamVjdF80Ly4vc3JjL3V0aWxzL2NvbnN0YW50cy5qcyIsIndlYnBhY2s6Ly93ZWJfcHJvamVjdF80Ly4vc3JjL2NvbXBvbmVudHMvQXBpLmpzIiwid2VicGFjazovL3dlYl9wcm9qZWN0XzQvLi9zcmMvcGFnZXMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vd2ViX3Byb2plY3RfNC8uL3NyYy9jb21wb25lbnRzL1NlY3Rpb24uanMiLCJ3ZWJwYWNrOi8vd2ViX3Byb2plY3RfNC8uL3NyYy9jb21wb25lbnRzL1VzZXJJbmZvLmpzIiwid2VicGFjazovL3dlYl9wcm9qZWN0XzQvLi9zcmMvY29tcG9uZW50cy9Qb3B1cFdpdGhJbWFnZS5qcyIsIndlYnBhY2s6Ly93ZWJfcHJvamVjdF80Ly4vc3JjL2NvbXBvbmVudHMvUG9wdXBXaXRoU3VibWl0LmpzIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBjbGFzcyBGb3JtVmFsaWRhdG9yIHtcbiAgICBjb25zdHJ1Y3Rvcihjb25maWdzLCBmb3JtRWxlbWVudCkge1xuICAgICAgICB0aGlzLl9mb3JtID0gZm9ybUVsZW1lbnQ7XG4gICAgICAgIHRoaXMuX2lucHV0U2VsZWN0b3IgPSBjb25maWdzLmlucHV0U2VsZWN0b3I7XG4gICAgICAgIHRoaXMuX3N1Ym1pdEJ1dHRvblNlbGVjdG9yID0gY29uZmlncy5zdWJtaXRCdXR0b25TZWxlY3RvcjtcbiAgICAgICAgdGhpcy5faW5hY3RpdmVCdXR0b25DbGFzcyA9IGNvbmZpZ3MuaW5hY3RpdmVCdXR0b25DbGFzcztcbiAgICAgICAgdGhpcy5faW5wdXRFcnJvckNsYXNzID0gY29uZmlncy5pbnB1dEVycm9yQ2xhc3M7XG4gICAgICAgIHRoaXMuX2Vycm9yQ2xhc3MgPSBjb25maWdzLmVycm9yQ2xhc3M7XG5cbiAgICB9XG4gICAgX3Nob3dJbnB1dEVycm9yKGlucHV0KSB7XG4gICAgICAgIGNvbnN0IGVycm9yRWxlbWVudCA9IHRoaXMuX2Zvcm0ucXVlcnlTZWxlY3RvcihgIyR7aW5wdXQuaWR9LWVycm9yYCk7XG4gICAgICAgIC8vIGFkZCBlcnJvciBtc2cvY2xhc3NcbiAgICAgICAgZXJyb3JFbGVtZW50LnRleHRDb250ZW50ID0gaW5wdXQudmFsaWRhdGlvbk1lc3NhZ2U7XG4gICAgICAgIC8vIGlucHV0LmNsYXNzTGlzdC5hZGQoZXJyb3JDbGFzcyk7XG4gICAgICAgIGVycm9yRWxlbWVudC5jbGFzc0xpc3QuYWRkKHRoaXMuX2Vycm9yQ2xhc3MpO1xuICAgICAgICBpbnB1dC5jbGFzc0xpc3QuYWRkKHRoaXMuX2lucHV0RXJyb3JDbGFzcylcbiAgICB9XG4gICAgX2hpZGVJbnB1dEVycm9yKGlucHV0KSB7XG4gICAgICAgIGNvbnN0IGVycm9yRWxlbWVudCA9IHRoaXMuX2Zvcm0ucXVlcnlTZWxlY3RvcihgIyR7aW5wdXQuaWR9LWVycm9yYCk7XG4gICAgICAgIC8vIGFkZCBlcnJvciBtc2cvY2xhc3NcbiAgICAgICAgZXJyb3JFbGVtZW50LnRleHRDb250ZW50ID0gXCJcIjtcbiAgICAgICAgLy8gaW5wdXQuY2xhc3NMaXN0LnJlbW92ZShlcnJvckNsYXNzKTtcbiAgICAgICAgZXJyb3JFbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUodGhpcy5fZXJyb3JDbGFzcyk7XG4gICAgICAgIGlucHV0LmNsYXNzTGlzdC5yZW1vdmUodGhpcy5faW5wdXRFcnJvckNsYXNzKTtcblxuICAgIH1cbiAgICBfY2hlY2tJbnB1dFZhbGlkaXR5KGlucHV0KSB7XG4gICAgICAgIGlmICghaW5wdXQudmFsaWRpdHkudmFsaWQpIHtcbiAgICAgICAgICAgIHRoaXMuX3Nob3dJbnB1dEVycm9yKGlucHV0KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuX2hpZGVJbnB1dEVycm9yKGlucHV0KTtcblxuICAgICAgICB9XG5cbiAgICB9XG4gICAgX2hhc1ZhbGlkSW5wdXRzKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5faW5wdXRMaXN0LmV2ZXJ5KChpbnB1dCkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIGlucHV0LnZhbGlkaXR5LnZhbGlkO1xuICAgICAgICB9KVxuXG4gICAgfVxuICAgIF9zZXRFdmVudExpc3RlbmVycygpIHtcbiAgICAgICAgdGhpcy5faW5wdXRMaXN0ID0gQXJyYXkuZnJvbSh0aGlzLl9mb3JtLnF1ZXJ5U2VsZWN0b3JBbGwodGhpcy5faW5wdXRTZWxlY3RvcikpO1xuICAgICAgICB0aGlzLl9idXR0b24gPSB0aGlzLl9mb3JtLnF1ZXJ5U2VsZWN0b3IodGhpcy5fc3VibWl0QnV0dG9uU2VsZWN0b3IpO1xuICAgICAgICB0aGlzLnRvZ2dsZUJ1dHRvbigpO1xuICAgICAgICB0aGlzLl9pbnB1dExpc3QuZm9yRWFjaCgoaW5wdXQpID0+IHtcbiAgICAgICAgICAgIGlucHV0LmFkZEV2ZW50TGlzdGVuZXIoXCJpbnB1dFwiLCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5fY2hlY2tJbnB1dFZhbGlkaXR5KGlucHV0KTtcbiAgICAgICAgICAgICAgICB0aGlzLnRvZ2dsZUJ1dHRvbigpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB0aGlzLnJlc2V0VmFsaWRhdGlvbigpO1xuXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICB0b2dnbGVCdXR0b24oKSB7XG4gICAgICAgIGlmICh0aGlzLl9oYXNWYWxpZElucHV0cygpKSB7XG4gICAgICAgICAgICB0aGlzLl9idXR0b24uZGlzYWJsZWQgPSBmYWxzZTtcbiAgICAgICAgICAgIHRoaXMuX2J1dHRvbi5jbGFzc0xpc3QucmVtb3ZlKHRoaXMuX2luYWN0aXZlQnV0dG9uQ2xhc3MpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5fYnV0dG9uLmRpc2FibGVkID0gdHJ1ZTtcbiAgICAgICAgICAgIHRoaXMuX2J1dHRvbi5jbGFzc0xpc3QuYWRkKHRoaXMuX2luYWN0aXZlQnV0dG9uQ2xhc3MpO1xuICAgICAgICB9XG5cbiAgICB9XG4gICAgZW5hYmxlVmFsaWRhdGlvbigpIHtcbiAgICAgICAgdGhpcy5fZm9ybS5hZGRFdmVudExpc3RlbmVyKFwic3VibWl0XCIsIChlKSA9PiBlLnByZXZlbnREZWZhdWx0KCkpO1xuICAgICAgICB0aGlzLl9zZXRFdmVudExpc3RlbmVycygpO1xuICAgIH1cblxuICAgIHJlc2V0VmFsaWRhdGlvbigpIHtcbiAgICAgICAgdGhpcy50b2dnbGVCdXR0b24oKTsgLy8gPD0gPSBjb250cm9sbGluZyB0aGUgc3VibWl0IGJ1dHRvbiA9PVxuXG4gICAgICAgIHRoaXMuX2lucHV0TGlzdC5mb3JFYWNoKChpbnB1dCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5faGlkZUlucHV0RXJyb3IoaW5wdXQpIC8vPD0gPSBjbGVhcmluZyBlcnJvcnMgPT1cbiAgICAgICAgfSk7XG5cbiAgICB9XG5cbn0iLCJleHBvcnQgY2xhc3MgQ2FyZCB7XG4gICAgY29uc3RydWN0b3IoXG4gICAgICAgIGRhdGEsXG4gICAgICAgIHNlbGVjdG9yLCB7XG4gICAgICAgICAgICBoYW5kbGVDYXJkQ2xpY2ssXG4gICAgICAgICAgICBoYW5kbGVDYXJkRGVsZXRlLFxuICAgICAgICAgICAgaGFuZGxlTGlrZUNhcmQsXG4gICAgICAgIH0sIHVzZXJJZFxuICAgICkge1xuICAgICAgICB0aGlzLl90ZXh0ID0gZGF0YS5uYW1lO1xuICAgICAgICB0aGlzLl9saW5rID0gZGF0YS5saW5rO1xuICAgICAgICB0aGlzLl9zZWxlY3RvciA9IHNlbGVjdG9yO1xuICAgICAgICB0aGlzLl9oYW5kbGVDYXJkQ2xpY2sgPSBoYW5kbGVDYXJkQ2xpY2s7XG4gICAgICAgIHRoaXMuX2hhbmRsZUNhcmREZWxldGUgPSBoYW5kbGVDYXJkRGVsZXRlO1xuICAgICAgICB0aGlzLl9oYW5kbGVMaWtlQ2FyZCA9IGhhbmRsZUxpa2VDYXJkO1xuICAgICAgICB0aGlzLl9pZCA9IGRhdGEuX2lkO1xuICAgICAgICB0aGlzLl91c2VySWQgPSB1c2VySWQ7XG4gICAgICAgIHRoaXMuX293bmVySWQgPSBkYXRhLm93bmVyLl9pZDtcbiAgICAgICAgdGhpcy5fbGlrZXMgPSBkYXRhLmxpa2VzO1xuICAgIH1cbiAgICBfZ2V0Q2xvbmVGcm9tVGVtcGxhdGUgPSAoKSA9PiB7XG4gICAgICAgIGNvbnN0IGNhcmRFbGVtZW50ID0gZG9jdW1lbnRcbiAgICAgICAgICAgIC5xdWVyeVNlbGVjdG9yKHRoaXMuX3NlbGVjdG9yKVxuICAgICAgICAgICAgLmNvbnRlbnQucXVlcnlTZWxlY3RvcihcIi5jYXJkXCIpXG4gICAgICAgICAgICAuY2xvbmVOb2RlKHRydWUpO1xuICAgICAgICByZXR1cm4gY2FyZEVsZW1lbnQ7XG4gICAgfVxuXG4gICAgX3NldEV2ZW50TGlzdGVuZXJzID0gKCkgPT4ge1xuXG4gICAgICAgIHRoaXMuX2xpa2VCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsICgpID0+IHtcbiAgICAgICAgICAgIHRoaXMuX2hhbmRsZUxpa2VDYXJkKHRoaXMuX2lkKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuX2ltYWdlLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLl9oYW5kbGVDYXJkQ2xpY2sodGhpcy5faWQpO1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5fZGVsZXRlQnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLl9oYW5kbGVDYXJkRGVsZXRlKHRoaXMuX2lkKTtcblxuICAgICAgICB9KVxuICAgIH1cblxuICAgIGxpa2VDYXJkKG5ld0xpa2VzKSB7XG4gICAgICAgIHRoaXMuX2xpa2VCdXR0b24uY2xhc3NMaXN0LmFkZChcImNhcmRfX2xpa2UtYnV0dG9uX2FjdGl2ZVwiKTtcbiAgICAgICAgdGhpcy5fbGlrZXMgPSBuZXdMaWtlcztcbiAgICAgICAgdGhpcy5fbGlrZUNvdW50LnRleHRDb250ZW50ID0gdGhpcy5fbGlrZXMubGVuZ3RoO1xuICAgIH1cblxuICAgIGRpc2xpa2VDYXJkKG5ld0xpa2VzKSB7XG4gICAgICAgIHRoaXMuX2xpa2VCdXR0b24uY2xhc3NMaXN0LnJlbW92ZShcImNhcmRfX2xpa2UtYnV0dG9uX2FjdGl2ZVwiKTtcbiAgICAgICAgdGhpcy5fbGlrZXMgPSBuZXdMaWtlcztcbiAgICAgICAgdGhpcy5fbGlrZUNvdW50LnRleHRDb250ZW50ID0gdGhpcy5fbGlrZXMubGVuZ3RoO1xuICAgIH1cbiAgICBpc0xpa2VkKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fbGlrZXMuc29tZSgobGlrZSkgPT4gbGlrZS5faWQgPT09IHRoaXMuX3VzZXJJZCk7XG4gICAgfVxuXG4gICAgcmVtb3ZlQ2FyZCgpIHtcbiAgICAgICAgdGhpcy5fZWxlbWVudC5yZW1vdmUoKTtcbiAgICAgICAgdGhpcy5fZWxlbWVudCA9IG51bGw7XG5cbiAgICB9XG4gICAgZ2VuZXJhdGVDYXJkKCkge1xuICAgICAgICB0aGlzLl9lbGVtZW50ID0gdGhpcy5fZ2V0Q2xvbmVGcm9tVGVtcGxhdGUoKTtcbiAgICAgICAgdGhpcy5faW1hZ2UgPSB0aGlzLl9lbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuY2FyZF9faW1hZ2VcIik7XG5cblxuICAgICAgICB0aGlzLl9lbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuY2FyZF9faW5mby10aXRsZVwiKS50ZXh0Q29udGVudCA9IHRoaXMuX3RleHQ7XG4gICAgICAgIHRoaXMuX2ltYWdlLnNyYyA9IHRoaXMuX2xpbms7XG4gICAgICAgIHRoaXMuX2ltYWdlLmFsdCA9IGBQbGFjZSBpbiAke3RoaXMuX3RleHR9YDtcblxuICAgICAgICB0aGlzLl9kZWxldGVCdXR0b24gPSB0aGlzLl9lbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuY2FyZF9faW1hZ2UtdHJhc2hcIik7XG5cblxuICAgICAgICB0aGlzLl9vd25lcklkICE9PSB0aGlzLl91c2VySWQgJiZcbiAgICAgICAgICAgICh0aGlzLl9kZWxldGVCdXR0b24uc3R5bGUuZGlzcGxheSA9IFwibm9uZVwiKTtcbiAgICAgICAgdGhpcy5fbGlrZUJ1dHRvbiA9IHRoaXMuX2VsZW1lbnQucXVlcnlTZWxlY3RvcihcIi5jYXJkX19saWtlLWJ1dHRvblwiKTtcbiAgICAgICAgdGhpcy5fbGlrZUNvdW50ID0gdGhpcy5fZWxlbWVudC5xdWVyeVNlbGVjdG9yKFwiLmNhcmRfX2xpa2UtY291bnRcIik7XG4gICAgICAgIHRoaXMuX2xpa2VDb3VudC50ZXh0Q29udGVudCA9IHRoaXMuX2xpa2VzLmxlbmd0aDtcblxuICAgICAgICB0aGlzLmlzTGlrZWQoKSAmJiB0aGlzLmxpa2VDYXJkKHRoaXMuX2xpa2VzKTtcblxuICAgICAgICB0aGlzLl9zZXRFdmVudExpc3RlbmVycygpO1xuXG4gICAgICAgIHJldHVybiB0aGlzLl9lbGVtZW50O1xuICAgIH1cbn0iLCJleHBvcnQgY2xhc3MgUG9wdXAge1xuICAgIGNvbnN0cnVjdG9yKHBvcHVwU2VsZWN0b3IpIHtcbiAgICAgICAgdGhpcy5fcG9wdXBFbGVtZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcihwb3B1cFNlbGVjdG9yKTtcbiAgICAgICAgdGhpcy5jbG9zZSA9IHRoaXMuY2xvc2UuYmluZCh0aGlzKTtcbiAgICB9XG4gICAgX2hhbmRsZUVzY0Nsb3NlID0gKGV2dCkgPT4ge1xuICAgICAgICBpZiAoZXZ0LmtleSA9PT0gXCJFc2NhcGVcIikge1xuICAgICAgICAgICAgdGhpcy5jbG9zZSgpO1xuICAgICAgICB9XG4gICAgfVxuICAgIG9wZW4oKSB7XG4gICAgICAgIHRoaXMuX3BvcHVwRWxlbWVudC5jbGFzc0xpc3QuYWRkKFwicG9wdXBfb3BlbmVkXCIpO1xuICAgICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKFwia2V5ZG93blwiLCB0aGlzLl9oYW5kbGVFc2NDbG9zZSk7XG4gICAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJtb3VzZWRvd25cIiwgdGhpcy5fb3ZlcmxheUNsb3NlKTtcblxuICAgIH1cbiAgICBjbG9zZSgpIHtcbiAgICAgICAgdGhpcy5fcG9wdXBFbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoXCJwb3B1cF9vcGVuZWRcIik7XG4gICAgICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJrZXlkb3duXCIsIHRoaXMuX2hhbmRsZUVzY0Nsb3NlKTtcbiAgICAgICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIHRoaXMuX292ZXJsYXlDbG9zZSk7XG5cbiAgICB9XG4gICAgX292ZXJsYXlDbG9zZSA9IChldnQpID0+IHtcbiAgICAgICAgaWYgKGV2dC50YXJnZXQuY2xhc3NMaXN0LmNvbnRhaW5zKFwicG9wdXBcIikpIHtcbiAgICAgICAgICAgIHRoaXMuY2xvc2UoKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBzZXRFdmVudExpc3RlbmVycygpIHtcbiAgICAgICAgdGhpcy5fcG9wdXBFbGVtZW50XG4gICAgICAgICAgICAucXVlcnlTZWxlY3RvcihcIi5wb3B1cF9fY2xvc2UtYnV0dG9uXCIpXG4gICAgICAgICAgICAuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsICgpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLmNsb3NlKClcbiAgICAgICAgICAgIH0pO1xuICAgIH1cblxufSIsImltcG9ydCB7XG4gICAgUG9wdXBcbn0gZnJvbSBcIi4vUG9wdXBcIjtcbmV4cG9ydCBjbGFzcyBQb3B1cFdpdGhGb3JtIGV4dGVuZHMgUG9wdXAge1xuICAgIGNvbnN0cnVjdG9yKFBvcHVwU2VsZWN0b3IsIHN1Ym1pdEhhbmRsZXIpIHtcbiAgICAgICAgc3VwZXIoUG9wdXBTZWxlY3Rvcik7XG4gICAgICAgIHRoaXMuX3N1Ym1pdEhhbmRsZXIgPSBzdWJtaXRIYW5kbGVyO1xuICAgICAgICB0aGlzLl9mb3JtRWxlbWVudCA9IHRoaXMuX3BvcHVwRWxlbWVudC5xdWVyeVNlbGVjdG9yKCcucG9wdXBfX2Zvcm0nKTtcbiAgICAgICAgdGhpcy5faW5wdXRzID0gWy4uLnRoaXMuX2Zvcm1FbGVtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCIuZm9ybV9faW5wdXRcIildOztcbiAgICB9XG4gICAgX2dldElucHV0VmFsdWVzKCkge1xuXG4gICAgICAgIGNvbnN0IGlucHV0VmFsdWVzID0ge31cbiAgICAgICAgdGhpcy5faW5wdXRzLmZvckVhY2goKGlucHV0KSA9PiB7XG4gICAgICAgICAgICBpbnB1dFZhbHVlc1tpbnB1dC5uYW1lXSA9IGlucHV0LnZhbHVlO1xuICAgICAgICB9KVxuICAgICAgICByZXR1cm4gaW5wdXRWYWx1ZXM7XG5cbiAgICB9XG4gICAgc2V0SW5wdXRWYWx1ZXMoZGF0YSkge1xuICAgICAgICB0aGlzLl9pbnB1dHMuZm9yRWFjaCgoaW5wdXQpID0+IHtcbiAgICAgICAgICAgIGlucHV0LnZhbHVlID0gZGF0YVtpbnB1dC5uYW1lXTtcbiAgICAgICAgfSk7XG4gICAgICAgIGNvbnNvbGUubG9nKHRoaXMuX2lucHV0cylcbiAgICB9XG4gICAgc2V0RXZlbnRMaXN0ZW5lcnMoKSB7XG4gICAgICAgIHRoaXMuX2Zvcm1FbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJzdWJtaXRcIiwgKGUpID0+IHtcbiAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgIHRoaXMuX3N1Ym1pdEhhbmRsZXIodGhpcy5fZ2V0SW5wdXRWYWx1ZXMoKSk7XG4gICAgICAgICAgICB0aGlzLmNsb3NlKCk7XG4gICAgICAgIH0pO1xuICAgICAgICBzdXBlci5zZXRFdmVudExpc3RlbmVycygpO1xuICAgIH1cbiAgICBjbG9zZSA9ICgpID0+IHtcbiAgICAgICAgc3VwZXIuY2xvc2UoKVxuICAgICAgICB0aGlzLl9mb3JtRWxlbWVudC5yZXNldCgpOyAvL3Jlc2V0IHRoZSBmb3JtIHdoZW4gb3Blbm5pbmcgYWdhaW5cblxuICAgIH1cbn0iLCIvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4vLy8vLy8vLyBTZWxlY3RvcnMgLy8vLy8vLy8vLy9cbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbmV4cG9ydCBjb25zdCBwcm9maWxlRm9ybSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuZm9ybVwiKTtcbmV4cG9ydCBjb25zdCBwcm9maWxlID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5wcm9maWxlXCIpO1xuZXhwb3J0IGNvbnN0IHByb2ZpbGVOYW1lID0gcHJvZmlsZS5xdWVyeVNlbGVjdG9yKFwiLnByb2ZpbGVfX25hbWVcIik7XG5leHBvcnQgY29uc3QgcHJvZmlsZVBvcHVwID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5wb3B1cC1lZGl0LXByb2ZpbGVcIik7XG5leHBvcnQgY29uc3QgcHJvZmlsZVRpdGxlID0gcHJvZmlsZS5xdWVyeVNlbGVjdG9yKFwiLnByb2ZpbGVfX3RpdGxlXCIpO1xuZXhwb3J0IGNvbnN0IGlucHV0TmFtZSA9IGZvcm0ucXVlcnlTZWxlY3RvcihcIi5mb3JtX19pbnB1dFtuYW1lPSduYW1lJ11cIik7XG5leHBvcnQgY29uc3QgaW5wdXRUaXRsZSA9IGZvcm0ucXVlcnlTZWxlY3RvcihcIi5mb3JtX19pbnB1dFtuYW1lPSd0aXRsZSddXCIpO1xuZXhwb3J0IGNvbnN0IGNhcmRzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5jYXJkc1wiKTtcblxuXG5leHBvcnQgY29uc3QgY2FyZExpc3QgPSBjYXJkcy5xdWVyeVNlbGVjdG9yKFwiLmNhcmRzX19saXN0XCIpO1xuZXhwb3J0IGNvbnN0IHBsYWNlUG9wdXBGb3JtID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5wb3B1cF9fZm9ybS10eXBlLWFkZC1wbGFjZVwiKTtcbmV4cG9ydCBjb25zdCBuYW1lID0gcGxhY2VQb3B1cEZvcm0ucXVlcnlTZWxlY3RvcihcIi5mb3JtX19pbnB1dC10eXBlLXBsYWNlLW5hbWVcIik7XG5leHBvcnQgY29uc3QgcGxhY2VVUkwgPSBwbGFjZVBvcHVwRm9ybS5xdWVyeVNlbGVjdG9yKFwiLmZvcm1fX2lucHV0LXR5cGUtcGxhY2UtdXJsXCIpO1xuZXhwb3J0IGNvbnN0IGltZ1ByZXZpZXcgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLnBvcHVwLXByZXZcIik7XG5leHBvcnQgY29uc3QgcG9wdXBQcmV2aWV3SW1nID0gaW1nUHJldmlldy5xdWVyeVNlbGVjdG9yKFwiLnBvcHVwX19pbWFnZVwiKTtcbmV4cG9ydCBjb25zdCBwb3B1cFByZXZpZXdDYXB0aW9uID0gaW1nUHJldmlldy5xdWVyeVNlbGVjdG9yKFwiLnBvcHVwX19jYXB0aW9uXCIpO1xuXG5cbmV4cG9ydCBjb25zdCBwbGFjZUZvcm0gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLnBvcHVwLXBsYWNlXCIpO1xuZXhwb3J0IGNvbnN0IGNhcmRUZW1wbGF0ZVNlbGVjdG9yID0gXCIjY2FyZC10ZW1wbGF0ZVwiO1xuXG5cbmV4cG9ydCBjb25zdCBlZGl0UHJvZmlsZUJ1dHRvbiA9IHByb2ZpbGUucXVlcnlTZWxlY3RvcihcIi5wcm9maWxlX19lZGl0LWJ1dHRvblwiKTtcbmV4cG9ydCBjb25zdCBhZGRDYXJkUG9wdXAgPSBwcm9maWxlLnF1ZXJ5U2VsZWN0b3IoXCIucHJvZmlsZV9fYWRkLWJ1dHRvblwiKTtcbmV4cG9ydCBjb25zdCBjbG9zZUJ1dHRvbnMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcucG9wdXBfX2Nsb3NlLWJ1dHRvbicpO1xuZXhwb3J0IGNvbnN0IGF2YXRhciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIucHJvZmlsZV9faW1hZ2UtY29udGFpbmVyXCIpO1xuZXhwb3J0IGNvbnN0IGF2YXRhckZvcm0gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLnBvcHVwX19mb3JtX3R5cGVfYXZhdGFyXCIpXG5cbmV4cG9ydCBjb25zdCBpbml0aWFsQ2FyZHMgPSBbe1xuICAgICAgICBuYW1lOiBcIllvc2VtaXRlIFZhbGxleVwiLFxuICAgICAgICBsaW5rOiBcImh0dHBzOi8vY29kZS5zMy55YW5kZXgubmV0L3dlYi1jb2RlL3lvc2VtaXRlLmpwZ1wiLFxuICAgIH0sXG4gICAge1xuICAgICAgICBuYW1lOiBcIkxha2UgTG91aXNlXCIsXG4gICAgICAgIGxpbms6IFwiaHR0cHM6Ly9jb2RlLnMzLnlhbmRleC5uZXQvd2ViLWNvZGUvbGFrZS1sb3Vpc2UuanBnXCIsXG4gICAgfSxcbiAgICB7XG4gICAgICAgIG5hbWU6IFwiQmFsZCBNb3VudGFpbnNcIixcbiAgICAgICAgbGluazogXCJodHRwczovL2NvZGUuczMueWFuZGV4Lm5ldC93ZWItY29kZS9iYWxkLW1vdW50YWlucy5qcGdcIixcbiAgICB9LFxuICAgIHtcbiAgICAgICAgbmFtZTogXCJMYXRlbWFyXCIsXG4gICAgICAgIGxpbms6IFwiaHR0cHM6Ly9jb2RlLnMzLnlhbmRleC5uZXQvd2ViLWNvZGUvbGF0ZW1hci5qcGdcIixcbiAgICB9LFxuICAgIHtcbiAgICAgICAgbmFtZTogXCJWYW5vaXNlIE5hdGlvbmFsIFBhcmtcIixcbiAgICAgICAgbGluazogXCJodHRwczovL2NvZGUuczMueWFuZGV4Lm5ldC93ZWItY29kZS92YW5vaXNlLmpwZ1wiLFxuICAgIH0sXG4gICAge1xuICAgICAgICBuYW1lOiBcIkxhZ28gZGkgQnJhaWVzXCIsXG4gICAgICAgIGxpbms6IFwiaHR0cHM6Ly9jb2RlLnMzLnlhbmRleC5uZXQvd2ViLWNvZGUvbGFnby5qcGdcIixcbiAgICB9LFxuXTsiLCJjb25zdCBjdXN0b21GZXRjaCA9ICh1cmwsIGhlYWRlcnMpID0+IHtcbiAgICByZXR1cm4gZmV0Y2godXJsLCBoZWFkZXJzKVxuICAgICAgICAudGhlbihyZXMgPT4gcmVzLm9rID8gcmVzLmpzb24oKSA6IFByb21pc2UucmVqZWN0KHJlcy5zdGF0dXNUZXh0KSkuY2F0Y2goZXJyID0+IGNvbnNvbGUubG9nKCkpXG5cbn1cbmNsYXNzIEFwaSB7XG4gICAgY29uc3RydWN0b3Ioe1xuICAgICAgICBiYXNlVXJsLFxuICAgICAgICBoZWFkZXJzXG4gICAgfSkge1xuICAgICAgICB0aGlzLl9iYXNlVXJsID0gYmFzZVVybDtcbiAgICAgICAgdGhpcy5faGVhZGVycyA9IGhlYWRlcnM7XG4gICAgfVxuXG5cblxuICAgIGdldEluaXRpYWxDYXJkcygpIHtcbiAgICAgICAgcmV0dXJuIGN1c3RvbUZldGNoKGAke3RoaXMuX2Jhc2VVcmx9L2NhcmRzYCwge1xuICAgICAgICAgICAgaGVhZGVyczogdGhpcy5faGVhZGVyc1xuICAgICAgICB9KVxuICAgIH1cbiAgICBnZXRVc2VySW5mbygpIHtcbiAgICAgICAgcmV0dXJuIGN1c3RvbUZldGNoKGAke3RoaXMuX2Jhc2VVcmx9L3VzZXJzL21lYCwge1xuICAgICAgICAgICAgaGVhZGVyczogdGhpcy5faGVhZGVyc1xuICAgICAgICB9KVxuICAgIH1cbiAgICBzZXRVc2VySW5mbyh7XG4gICAgICAgIG5hbWUsXG4gICAgICAgIGFib3V0XG4gICAgfSkge1xuICAgICAgICBjb25zb2xlLmxvZygndGVzdCcsIHtcbiAgICAgICAgICAgIG5hbWUsXG4gICAgICAgICAgICBhYm91dFxuICAgICAgICB9KVxuXG4gICAgICAgIHJldHVybiBjdXN0b21GZXRjaChgJHt0aGlzLl9iYXNlVXJsfS91c2Vycy9tZWAsIHtcbiAgICAgICAgICAgIGhlYWRlcnM6IHRoaXMuX2hlYWRlcnMsXG4gICAgICAgICAgICBtZXRob2Q6IFwiUEFUQ0hcIixcbiAgICAgICAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHtcbiAgICAgICAgICAgICAgICBuYW1lOiBuYW1lLFxuICAgICAgICAgICAgICAgIGFib3V0OiBhYm91dCxcbiAgICAgICAgICAgIH0pLFxuICAgICAgICB9KVxuICAgIH1cbiAgICBjcmVhdGVDYXJkKGRhdGEpIHtcbiAgICAgICAgcmV0dXJuIGN1c3RvbUZldGNoKGAke3RoaXMuX2Jhc2VVcmx9L2NhcmRzYCwge1xuICAgICAgICAgICAgaGVhZGVyczogdGhpcy5faGVhZGVycyxcbiAgICAgICAgICAgIG1ldGhvZDogJ1BPU1QnLFxuICAgICAgICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkoZGF0YSlcbiAgICAgICAgfSlcblxuICAgIH1cbiAgICBkZWxldGVDYXJkKGNhcmRJZCkge1xuICAgICAgICByZXR1cm4gY3VzdG9tRmV0Y2goYCR7dGhpcy5fYmFzZVVybH0vY2FyZHMvJHtjYXJkSWR9YCwge1xuICAgICAgICAgICAgaGVhZGVyczogdGhpcy5faGVhZGVycyxcbiAgICAgICAgICAgIG1ldGhvZDogJ0RFTEVURScsXG4gICAgICAgIH0pXG4gICAgfVxuICAgIGxpa2VDYXJkKGNhcmRJZCkge1xuICAgICAgICAvLyBjb25zb2xlLmxvZyhjYXJkSWQpXG4gICAgICAgIHJldHVybiBjdXN0b21GZXRjaChgJHt0aGlzLl9iYXNlVXJsfS9jYXJkcy9saWtlcy8ke2NhcmRJZH1gLCB7XG4gICAgICAgICAgICBoZWFkZXJzOiB0aGlzLl9oZWFkZXJzLFxuICAgICAgICAgICAgbWV0aG9kOiAnUFVUJyxcbiAgICAgICAgfSlcbiAgICB9XG5cbiAgICBkaXNsaWtlQ2FyZChjYXJkSWQpIHtcbiAgICAgICAgcmV0dXJuIGN1c3RvbUZldGNoKGAke3RoaXMuX2Jhc2VVcmx9L2NhcmRzL2xpa2VzLyR7Y2FyZElkfWAsIHtcbiAgICAgICAgICAgIGhlYWRlcnM6IHRoaXMuX2hlYWRlcnMsXG4gICAgICAgICAgICBtZXRob2Q6ICdERUxFVEUnLFxuICAgICAgICB9KVxuICAgIH1cbiAgICBzZXRVc2VyQXZhdGFyKHVybCkge1xuICAgICAgICByZXR1cm4gZmV0Y2goYCR7dGhpcy5fYmFzZVVybH0vdXNlcnMvbWUvYXZhdGFyYCwge1xuICAgICAgICAgICAgaGVhZGVyczogdGhpcy5faGVhZGVycyxcbiAgICAgICAgICAgIG1ldGhvZDogXCJQQVRDSFwiLFxuICAgICAgICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkoe1xuICAgICAgICAgICAgICAgIGF2YXRhcjogdXJsLFxuICAgICAgICAgICAgfSksXG4gICAgICAgIH0pXG4gICAgfVxuXG5cbiAgICAvLyBvdGhlciBtZXRob2RzIGZvciB3b3JraW5nIHdpdGggdGhlIEFQSVxufVxuXG5leHBvcnQgY29uc3QgYXBpID0gbmV3IEFwaSh7XG4gICAgYmFzZVVybDogXCJodHRwczovL2Fyb3VuZC5ub21vcmVwYXJ0aWVzLmNvL3YxL2NvaG9ydC0zLWVuXCIsIC8vY29ob3J0LTMtZW5cbiAgICBoZWFkZXJzOiB7XG4gICAgICAgIGF1dGhvcml6YXRpb246IFwiZWRkZTNhNWMtYjMwZC00MGIwLTk5ZTktNmY3MmVlOTc2ZGRmXCIsXG4gICAgICAgIFwiQ29udGVudC1UeXBlXCI6IFwiYXBwbGljYXRpb24vanNvblwiXG4gICAgfVxufSk7IiwiLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuLy8vLy8vLy8gSU1QT1JUUyAvLy8vLy8vLy8vLy8vLy8vXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuaW1wb3J0IHtcbiAgRm9ybVZhbGlkYXRvclxufVxuZnJvbSBcIi4uL2NvbXBvbmVudHMvRm9ybVZhbGlkYXRvci5qc1wiO1xuXG5pbXBvcnQge1xuICBDYXJkXG59IGZyb20gXCIuLi9jb21wb25lbnRzL0NhcmQuanNcIjtcbmltcG9ydCB7XG4gIFBvcHVwXG59XG5mcm9tIFwiLi4vY29tcG9uZW50cy9Qb3B1cC5qc1wiO1xuaW1wb3J0IHtcbiAgUG9wdXBXaXRoRm9ybVxufVxuZnJvbSBcIi4uL2NvbXBvbmVudHMvUG9wdXBXaXRoRm9ybS5qc1wiO1xuaW1wb3J0IHtcbiAgUG9wdXBXaXRoU3VibWl0XG59XG5mcm9tIFwiLi4vY29tcG9uZW50cy9Qb3B1cFdpdGhTdWJtaXRcIjtcbmltcG9ydCB7XG4gIFNlY3Rpb25cbn0gZnJvbSBcIi4uL2NvbXBvbmVudHMvU2VjdGlvbi5qc1wiO1xuXG5pbXBvcnQge1xuICBVc2VySW5mb1xufSBmcm9tIFwiLi4vY29tcG9uZW50cy9Vc2VySW5mby5qc1wiO1xuXG5cbmltcG9ydCBcIi4uL3N0eWxlcy9pbmRleC5jc3NcIjtcbmltcG9ydCB7XG4gIFBvcHVwV2l0aEltYWdlXG59IGZyb20gXCIuLi9jb21wb25lbnRzL1BvcHVwV2l0aEltYWdlLmpzXCI7XG5cbmltcG9ydCB7XG4gIHByb2ZpbGVGb3JtLFxuICBwcm9maWxlLFxuICBwcm9maWxlTmFtZSxcbiAgcHJvZmlsZVBvcHVwLFxuICBwcm9maWxlVGl0bGUsXG4gIGlucHV0TmFtZSxcbiAgaW5wdXRUaXRsZSxcbiAgY2FyZHMsXG4gIGNhcmRUZW1wbGF0ZSxcbiAgY2FyZExpc3QsXG4gIHByb2ZpbGVFZGl0LFxuICBwbGFjZVBvcHVwRm9ybSxcbiAgbmFtZSxcbiAgcGxhY2VVUkwsXG4gIGltZ1ByZXZpZXcsXG4gIHBvcHVwUHJldmlld0ltZyxcbiAgcG9wdXBQcmV2aWV3Q2FwdGlvbixcbiAgcGxhY2VGb3JtLFxuICBjYXJkVGVtcGxhdGVTZWxlY3RvcixcbiAgZWRpdFByb2ZpbGVCdXR0b24sXG4gIGFkZENhcmRQb3B1cCxcbiAgY2xvc2VCdXR0b25zLFxuICBpbml0aWFsQ2FyZHMsXG4gIGF2YXRhcixcbiAgYXZhdGFyRm9ybSxcblxufSBmcm9tIFwiLi4vdXRpbHMvY29uc3RhbnRzXCJcbmltcG9ydCB7XG4gIGFwaVxufSBmcm9tIFwiLi4vY29tcG9uZW50cy9BcGlcIlxuXG5cblxuY29uc3QgcGxhY2VzU2VjdGlvbiA9IG5ldyBTZWN0aW9uKHtcbiAgICByZW5kZXJlcjogcmVuZGVyQ2FyZCxcbiAgfSxcbiAgXCIuY2FyZHNfX2xpc3RcIlxuKTtcblxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuLy8vLy8vLy8gQVBJIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gY29uc29sZS5sb2coYXBpKVxuXG5cbmxldCB1c2VySWQ7XG5Qcm9taXNlLmFsbChbYXBpLmdldEluaXRpYWxDYXJkcygpLCBhcGkuZ2V0VXNlckluZm8oKV0pXG4gIC50aGVuKChbY2FyZHMsIHVzZXJEYXRhXSkgPT4ge1xuICAgIHVzZXJJZCA9IHVzZXJEYXRhLl9pZDtcbiAgICBwbGFjZXNTZWN0aW9uLnJlbmRlckl0ZW1zKGNhcmRzKTtcbiAgICB1c2VySW5mby5zZXRVc2VySW5mbyh1c2VyRGF0YS5uYW1lLCB1c2VyRGF0YS50aXRsZSk7XG4gICAgdXNlckluZm8uc2V0VXNlckF2YXRhcih1c2VyRGF0YS5hdmF0YXIpO1xuICB9KVxuICAudGhlbigoKSA9PiB1c2VySW5mby5zZXRBdmF0YXJWaXNpYmxlKCkpXG4gIC5jYXRjaCgoZXJyKSA9PiBjb25zb2xlLmxvZyhlcnIpKTtcblxuY29uc3QgdXNlckluZm8gPSBuZXcgVXNlckluZm8oe1xuICBuYW1lU2VsZWN0b3I6IFwiLnByb2ZpbGVfX25hbWVcIixcbiAgam9iU2VsZWN0b3I6IFwiLnByb2ZpbGVfX3RpdGxlXCIsXG4gIGF2YXRhclNlbGVjdG9yOiBcIi5wcm9maWxlX19pbWFnZVwiLFxufSk7XG5cblxuXG5cblxuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuLy8vLy8vLy8gRm9ybSBWYWxpZHRhdGlvbiAvLy8vLy8vLy8vLy8vLy8vXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuY29uc3QgdmFsaWRhdGVDb25maWdzID0ge1xuICBpbnB1dFNlbGVjdG9yOiBcIi5mb3JtX19pbnB1dFwiLFxuICBzdWJtaXRCdXR0b25TZWxlY3RvcjogXCIuZm9ybV9fYnV0dG9uXCIsXG4gIGluYWN0aXZlQnV0dG9uQ2xhc3M6IFwiZm9ybV9fYnV0dG9uX2Rpc2FibGVkXCIsXG4gIGlucHV0RXJyb3JDbGFzczogXCJmb3JtX19pbnB1dC1lcnJvclwiLFxuICBlcnJvckNsYXNzOiBcImZvcm1fX2lucHV0LWVycm9yXCIsXG59O1xuXG5jb25zdCBwcm9maWxlRm9ybVZhbGlkYXRvciA9IG5ldyBGb3JtVmFsaWRhdG9yKFxuICB2YWxpZGF0ZUNvbmZpZ3MsXG4gIHByb2ZpbGVQb3B1cFxuKTtcbnByb2ZpbGVGb3JtVmFsaWRhdG9yLmVuYWJsZVZhbGlkYXRpb24oKTtcblxuY29uc3QgYWRkRm9ybVZhbGlkYXRvciA9IG5ldyBGb3JtVmFsaWRhdG9yKHZhbGlkYXRlQ29uZmlncywgcGxhY2VGb3JtKTtcbmFkZEZvcm1WYWxpZGF0b3IuZW5hYmxlVmFsaWRhdGlvbigpO1xuXG5jb25zdCBhdmF0YXJGb3JtVmFsaWRhdG9yID0gbmV3IEZvcm1WYWxpZGF0b3IoXG4gIHZhbGlkYXRlQ29uZmlncyxcbiAgYXZhdGFyRm9ybVxuKTtcbmF2YXRhckZvcm1WYWxpZGF0b3IuZW5hYmxlVmFsaWRhdGlvbigpO1xuXG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4vLy8vLy8vLyBjYXJkIGNyZWF0aW9uIC8vLy8vLy8vLy8vLy8vLy9cbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cblxuZnVuY3Rpb24gZ2VuZXJhdGVDYXJkKGRhdGEpIHtcbiAgY29uc3QgY2FyZCA9IG5ldyBDYXJkKFxuICAgIGRhdGEsXG4gICAgY2FyZFRlbXBsYXRlU2VsZWN0b3IsIHtcbiAgICAgIGhhbmRsZUNhcmRDbGljazogKCkgPT4ge1xuICAgICAgICBpbWFnZVBvcHVwLm9wZW4oZGF0YS5saW5rLCBkYXRhLm5hbWUpO1xuXG4gICAgICB9LFxuICAgICAgaGFuZGxlQ2FyZERlbGV0ZTogKGlkKSA9PiB7XG4gICAgICAgIGRlbGV0ZVBvcHVwLm9wZW4oKTtcblxuICAgICAgICBkZWxldGVQb3B1cC5zZXRBY3Rpb24oKCkgPT4ge1xuICAgICAgICAgIC8vIHN1Ym1pdCBtb2RhbFxuICAgICAgICAgIGFwaVxuICAgICAgICAgICAgLmRlbGV0ZUNhcmQoaWQpXG4gICAgICAgICAgICAudGhlbigocmVzKSA9PiB7XG4gICAgICAgICAgICAgIGNhcmQucmVtb3ZlQ2FyZCgpO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIC50aGVuKCgpID0+IHtcbiAgICAgICAgICAgICAgZGVsZXRlUG9wdXAuY2xvc2UoKTtcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAuY2F0Y2goKGVycikgPT4gY29uc29sZS5sb2coZXJyKSk7XG4gICAgICAgIH0pO1xuICAgICAgfSxcbiAgICAgIGhhbmRsZUxpa2VDYXJkOiAoaWQpID0+IHtcbiAgICAgICAgY29uc3QgTGlrZWQgPSBjYXJkLmlzTGlrZWQoKTtcbiAgICAgICAgLy9saWtlIGNhcmRcbiAgICAgICAgaWYgKCFMaWtlZCkge1xuICAgICAgICAgIGFwaVxuICAgICAgICAgICAgLmxpa2VDYXJkKGlkKVxuICAgICAgICAgICAgLnRoZW4oKHJlcykgPT4ge1xuICAgICAgICAgICAgICBjYXJkLmxpa2VDYXJkKHJlcy5saWtlcyk7XG4gICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdyZXMnLCByZXMpXG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgLmNhdGNoKChlcnIpID0+IGNvbnNvbGUubG9nKGVycikpO1xuXG5cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvL2Rpc2xpa2UgY2FyZFxuICAgICAgICAgIGFwaVxuICAgICAgICAgICAgLmRpc2xpa2VDYXJkKGlkKVxuICAgICAgICAgICAgLnRoZW4oKHJlcykgPT4ge1xuICAgICAgICAgICAgICBjYXJkLmRpc2xpa2VDYXJkKHJlcy5saWtlcyk7XG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgLmNhdGNoKChlcnIpID0+IGNvbnNvbGUubG9nKGVycikpO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgIH0sXG4gICAgdXNlcklkXG4gICk7XG4gIGNvbnN0IGNhcmRFbGVtZW50ID0gY2FyZC5nZW5lcmF0ZUNhcmQoKTtcbiAgcmV0dXJuIGNhcmRFbGVtZW50O1xuXG59XG5cblxuZnVuY3Rpb24gcmVuZGVyQ2FyZChkYXRhKSB7XG4gIGNvbnN0IGVsZW1lbnQgPSBnZW5lcmF0ZUNhcmQoZGF0YSk7XG4gIHBsYWNlc1NlY3Rpb24uYWRkSXRlbShlbGVtZW50KTtcbn1cbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbi8vLy8vLy8vIEV2ZW50TGlzdGVuZXJzIC8vLy8vLy8vLy8vLy8vLy8vLy9cbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblxuXG5lZGl0UHJvZmlsZUJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKCkgPT4ge1xuICBjb25zdCBpbmZvID0gdXNlckluZm8uZ2V0VXNlckluZm8oKTtcbiAgZWRpdFBvcHVwLnNldElucHV0VmFsdWVzKGluZm8pO1xuICBwcm9maWxlRm9ybVZhbGlkYXRvci5lbmFibGVWYWxpZGF0aW9uKCk7XG4gIHByb2ZpbGVGb3JtVmFsaWRhdG9yLnRvZ2dsZUJ1dHRvbigpO1xuICBlZGl0UG9wdXAub3BlbigpO1xuICBjb25zb2xlLmxvZygnY2xpY2snKVxufSk7XG5cbmFkZENhcmRQb3B1cC5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKCkgPT4ge1xuICBwb3B1cEFkZENhcmQub3BlbigpO1xuICBhZGRGb3JtVmFsaWRhdG9yLnJlc2V0VmFsaWRhdGlvbigpO1xuXG59KTtcbmF2YXRhci5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKCkgPT4ge1xuICBhdmF0YXJGb3JtVmFsaWRhdG9yLnJlc2V0Rm9ybUJ1dHRvbigpO1xuICBhdmF0YXJQb3B1cC5vcGVuKCk7XG59KTtcblxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuLy8vLy8vLy8gUG9wdXAgY3JlYXRpb24gLy8vLy8vLy8vLy8vLy8vL1xuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblxuXG5cblxuY29uc3QgaW1hZ2VQb3B1cCA9IG5ldyBQb3B1cFdpdGhJbWFnZShcIi5wb3B1cC1wcmV2XCIpO1xuXG5jb25zdCBlZGl0UG9wdXAgPSBuZXcgUG9wdXBXaXRoRm9ybShcIi5wb3B1cC1lZGl0LXByb2ZpbGVcIiwgKGRhdGEpID0+IHtcbiAgY29uc29sZS5sb2coJ2RhdGEgPT4nLCBkYXRhKVxuICBhcGlcbiAgICAuc2V0VXNlckluZm8oe1xuICAgICAgbmFtZTogZGF0YS5uYW1lLFxuICAgICAgYWJvdXQ6IGRhdGEudGl0bGVcbiAgICB9KVxuXG4gICAgLnRoZW4oKHJlcykgPT4ge1xuICAgICAgdXNlckluZm8uZ2V0VXNlckluZm8oKTtcbiAgICAgIHVzZXJJbmZvLnNldFVzZXJJbmZvKHtcbiAgICAgICAgbmFtZTogcmVzLm5hbWUsXG4gICAgICAgIGFib3V0OiByZXMuYWJvdXRcbiAgICAgIH0pXG5cbiAgICAgIGVkaXRQb3B1cC5jbG9zZSgpO1xuICAgIH0pXG4gICAgLmNhdGNoKChlcnIpID0+IGNvbnNvbGUubG9nKGVycikpXG59KTtcblxuXG5jb25zdCBwb3B1cEFkZENhcmQgPSBuZXcgUG9wdXBXaXRoRm9ybShcIi5wb3B1cC1wbGFjZVwiLCAoZGF0YSkgPT4ge1xuICBhcGlcbiAgICAuY3JlYXRlQ2FyZChkYXRhKVxuICAgIC50aGVuKChyZXMpID0+IHtcbiAgICAgIHJlbmRlckNhcmQocmVzKTtcbiAgICAgIHBvcHVwQWRkQ2FyZC5jbG9zZSgpO1xuICAgIH0pXG4gICAgLmNhdGNoKChlcnIpID0+IGNvbnNvbGUubG9nKGVycikpXG59KTtcbmNvbnN0IGRlbGV0ZVBvcHVwID0gbmV3IFBvcHVwV2l0aFN1Ym1pdChcIi5wb3B1cC10eXBlLWRlbGV0ZS1jYXJkXCIpO1xuY29uc3QgYXZhdGFyUG9wdXAgPSBuZXcgUG9wdXBXaXRoRm9ybShcIi5wb3B1cF90eXBlX2F2YXRhclwiLCAoZGF0YSkgPT4ge1xuICAvLyBhdmF0YXJQb3B1cC5yZW5kZXJMb2FkaW5nKHRydWUsIFwiU2F2aW5nIGF2YXRhci4uLlwiKTtcbiAgYXBpXG4gICAgLnNldFVzZXJBdmF0YXIoZGF0YS5saW5rKVxuICAgIC50aGVuKChyZXMpID0+IHtcbiAgICAgIHVzZXJJbmZvLnNldFVzZXJBdmF0YXIocmVzLmF2YXRhcik7XG4gICAgICBhdmF0YXJQb3B1cC5jbG9zZSgpO1xuICAgIH0pXG4gICAgLmNhdGNoKChlcnIpID0+IGNvbnNvbGUubG9nKGVycikpXG4gIC8vIC5maW5hbGx5KCgpID0+IGF2YXRhclBvcHVwLnJlbmRlckxvYWRpbmcoZmFsc2UpKTtcbn0pO1xuaW1hZ2VQb3B1cC5zZXRFdmVudExpc3RlbmVycygpO1xuZWRpdFBvcHVwLnNldEV2ZW50TGlzdGVuZXJzKCk7XG5wb3B1cEFkZENhcmQuc2V0RXZlbnRMaXN0ZW5lcnMoKTtcbmRlbGV0ZVBvcHVwLnNldEV2ZW50TGlzdGVuZXJzKCk7XG5hdmF0YXJQb3B1cC5zZXRFdmVudExpc3RlbmVycygpOyIsImV4cG9ydCBjbGFzcyBTZWN0aW9uIHtcbiAgICBjb25zdHJ1Y3Rvcih7XG4gICAgICAgIHJlbmRlcmVyXG4gICAgfSwgY29udGFpbmVyU2VsZWN0b3IpIHtcbiAgICAgICAgLy8gdGhpcy5pdGVtcyA9IGl0ZW1zO1xuICAgICAgICB0aGlzLl9yZW5kZXJlciA9IHJlbmRlcmVyO1xuICAgICAgICB0aGlzLl9jb250YWluZXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGNvbnRhaW5lclNlbGVjdG9yKTtcbiAgICB9XG4gICAgcmVuZGVySXRlbXMoaXRlbXMpIHtcbiAgICAgICAgaXRlbXMuZm9yRWFjaCgoaXRlbSkgPT4ge1xuICAgICAgICAgICAgdGhpcy5fcmVuZGVyZXIoaXRlbSk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBhZGRJdGVtKGl0ZW0pIHtcbiAgICAgICAgdGhpcy5fY29udGFpbmVyLnByZXBlbmQoaXRlbSk7XG4gICAgfVxufSIsImV4cG9ydCBjbGFzcyBVc2VySW5mbyB7XG4gICAgY29uc3RydWN0b3Ioe1xuICAgICAgICBuYW1lU2VsZWN0b3IsXG4gICAgICAgIGpvYlNlbGVjdG9yLFxuICAgICAgICBhdmF0YXJTZWxlY3RvclxuICAgIH0pIHtcbiAgICAgICAgdGhpcy5fcHJvZmlsZU5hbWUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKG5hbWVTZWxlY3Rvcik7XG4gICAgICAgIHRoaXMuX3Byb2ZpbGVKb2IgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGpvYlNlbGVjdG9yKTtcbiAgICAgICAgdGhpcy5fYXZhdGFyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihhdmF0YXJTZWxlY3Rvcik7XG5cbiAgICB9XG4gICAgZ2V0VXNlckluZm8oKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBuYW1lOiB0aGlzLl9wcm9maWxlTmFtZS50ZXh0Q29udGVudCxcbiAgICAgICAgICAgIGFib3V0OiB0aGlzLl9wcm9maWxlSm9iLnRleHRDb250ZW50LFxuICAgICAgICB9XG4gICAgfVxuICAgIHNldFVzZXJJbmZvKHtcbiAgICAgICAgbmFtZSxcbiAgICAgICAgYWJvdXRcbiAgICB9KSB7XG4gICAgICAgIHRoaXMuX3Byb2ZpbGVOYW1lLnRleHRDb250ZW50ID0gbmFtZTtcbiAgICAgICAgdGhpcy5fcHJvZmlsZUpvYi50ZXh0Q29udGVudCA9IGFib3V0O1xuICAgIH1cbiAgICBzZXRVc2VyQXZhdGFyKGF2YXRhcikgeyAvLyBoZXJlIGFkZHMgdGhlIGF2YXRhciB0byBET00gYWZ0ZXIgZmV0Y2hpbmcgZnJvbSBzZXJ2ZXJcbiAgICAgICAgdGhpcy5fYXZhdGFyLnNyYyA9IGF2YXRhcjtcbiAgICB9XG5cbiAgICBzZXRBdmF0YXJWaXNpYmxlKCkge1xuICAgICAgICB0aGlzLl9hdmF0YXIuc3R5bGUudmlzaWJpbGl0eSA9IFwidmlzaWJsZVwiO1xuICAgIH1cbn0iLCJpbXBvcnQge1xuICAgIFBvcHVwXG59IGZyb20gXCIuL1BvcHVwXCI7XG5leHBvcnQgY2xhc3MgUG9wdXBXaXRoSW1hZ2UgZXh0ZW5kcyBQb3B1cCB7XG4gICAgY29uc3RydWN0b3IocG9wdXBTZWxlY3Rvcikge1xuICAgICAgICBzdXBlcihwb3B1cFNlbGVjdG9yKTtcbiAgICAgICAgdGhpcy5fcG9wdXBJbWFnZSA9IHRoaXMuX3BvcHVwRWxlbWVudC5xdWVyeVNlbGVjdG9yKFwiLnBvcHVwX19pbWFnZVwiKTtcbiAgICAgICAgdGhpcy5fcG9wdXBDYXB0aW9uID0gdGhpcy5fcG9wdXBFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXCIucG9wdXBfX2NhcHRpb25cIik7XG5cbiAgICB9XG4gICAgb3BlbihpbWFnZSwgdGV4dCkge1xuXG4gICAgICAgIHRoaXMuX3BvcHVwSW1hZ2Uuc3JjID0gaW1hZ2U7XG4gICAgICAgIHRoaXMuX3BvcHVwSW1hZ2UuYWx0ID0gYEEgdmlldyBvZiAke3RleHR9YDtcbiAgICAgICAgdGhpcy5fcG9wdXBDYXB0aW9uLnRleHRDb250ZW50ID0gdGV4dDtcbiAgICAgICAgc3VwZXIub3BlbigpO1xuICAgIH1cbn0iLCJpbXBvcnQge1xuICAgIFBvcHVwXG59IGZyb20gXCIuL1BvcHVwXCI7XG5cbmV4cG9ydCBjbGFzcyBQb3B1cFdpdGhTdWJtaXQgZXh0ZW5kcyBQb3B1cCB7XG4gICAgc2V0QWN0aW9uKGFjdGlvbikge1xuICAgICAgICB0aGlzLl9zdWJtaXRIYW5kbGVyID0gYWN0aW9uO1xuICAgIH1cblxuICAgIHNldEV2ZW50TGlzdGVuZXJzKCkge1xuICAgICAgICB0aGlzLl9wb3B1cEVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcInN1Ym1pdFwiLCAoZSkgPT4ge1xuICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgdGhpcy5fc3VibWl0SGFuZGxlcigpO1xuICAgICAgICB9KTtcbiAgICAgICAgc3VwZXIuc2V0RXZlbnRMaXN0ZW5lcnMoKTtcbiAgICB9XG59Il0sIm5hbWVzIjpbIkZvcm1WYWxpZGF0b3IiLCJjb25zdHJ1Y3RvciIsImNvbmZpZ3MiLCJmb3JtRWxlbWVudCIsInRoaXMiLCJfZm9ybSIsIl9pbnB1dFNlbGVjdG9yIiwiaW5wdXRTZWxlY3RvciIsIl9zdWJtaXRCdXR0b25TZWxlY3RvciIsInN1Ym1pdEJ1dHRvblNlbGVjdG9yIiwiX2luYWN0aXZlQnV0dG9uQ2xhc3MiLCJpbmFjdGl2ZUJ1dHRvbkNsYXNzIiwiX2lucHV0RXJyb3JDbGFzcyIsImlucHV0RXJyb3JDbGFzcyIsIl9lcnJvckNsYXNzIiwiZXJyb3JDbGFzcyIsIl9zaG93SW5wdXRFcnJvciIsImlucHV0IiwiZXJyb3JFbGVtZW50IiwicXVlcnlTZWxlY3RvciIsImlkIiwidGV4dENvbnRlbnQiLCJ2YWxpZGF0aW9uTWVzc2FnZSIsImNsYXNzTGlzdCIsImFkZCIsIl9oaWRlSW5wdXRFcnJvciIsInJlbW92ZSIsIl9jaGVja0lucHV0VmFsaWRpdHkiLCJ2YWxpZGl0eSIsInZhbGlkIiwiX2hhc1ZhbGlkSW5wdXRzIiwiX2lucHV0TGlzdCIsImV2ZXJ5IiwiX3NldEV2ZW50TGlzdGVuZXJzIiwiQXJyYXkiLCJmcm9tIiwicXVlcnlTZWxlY3RvckFsbCIsIl9idXR0b24iLCJ0b2dnbGVCdXR0b24iLCJmb3JFYWNoIiwiYWRkRXZlbnRMaXN0ZW5lciIsInJlc2V0VmFsaWRhdGlvbiIsImRpc2FibGVkIiwiZW5hYmxlVmFsaWRhdGlvbiIsImUiLCJwcmV2ZW50RGVmYXVsdCIsIkNhcmQiLCJkYXRhIiwic2VsZWN0b3IiLCJ1c2VySWQiLCJoYW5kbGVDYXJkQ2xpY2siLCJoYW5kbGVDYXJkRGVsZXRlIiwiaGFuZGxlTGlrZUNhcmQiLCJkb2N1bWVudCIsIl9zZWxlY3RvciIsImNvbnRlbnQiLCJjbG9uZU5vZGUiLCJfbGlrZUJ1dHRvbiIsIl9oYW5kbGVMaWtlQ2FyZCIsIl9pZCIsIl9pbWFnZSIsIl9oYW5kbGVDYXJkQ2xpY2siLCJfZGVsZXRlQnV0dG9uIiwiX2hhbmRsZUNhcmREZWxldGUiLCJfdGV4dCIsIm5hbWUiLCJfbGluayIsImxpbmsiLCJfdXNlcklkIiwiX293bmVySWQiLCJvd25lciIsIl9saWtlcyIsImxpa2VzIiwibGlrZUNhcmQiLCJuZXdMaWtlcyIsIl9saWtlQ291bnQiLCJsZW5ndGgiLCJkaXNsaWtlQ2FyZCIsImlzTGlrZWQiLCJzb21lIiwibGlrZSIsInJlbW92ZUNhcmQiLCJfZWxlbWVudCIsImdlbmVyYXRlQ2FyZCIsIl9nZXRDbG9uZUZyb21UZW1wbGF0ZSIsInNyYyIsImFsdCIsInN0eWxlIiwiZGlzcGxheSIsIlBvcHVwIiwicG9wdXBTZWxlY3RvciIsImV2dCIsImtleSIsImNsb3NlIiwidGFyZ2V0IiwiY29udGFpbnMiLCJfcG9wdXBFbGVtZW50IiwiYmluZCIsIm9wZW4iLCJfaGFuZGxlRXNjQ2xvc2UiLCJfb3ZlcmxheUNsb3NlIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsInNldEV2ZW50TGlzdGVuZXJzIiwiUG9wdXBXaXRoRm9ybSIsIlBvcHVwU2VsZWN0b3IiLCJzdWJtaXRIYW5kbGVyIiwic3VwZXIiLCJfZm9ybUVsZW1lbnQiLCJyZXNldCIsIl9zdWJtaXRIYW5kbGVyIiwiX2lucHV0cyIsIl9nZXRJbnB1dFZhbHVlcyIsImlucHV0VmFsdWVzIiwidmFsdWUiLCJzZXRJbnB1dFZhbHVlcyIsImNvbnNvbGUiLCJsb2ciLCJwcm9maWxlIiwicHJvZmlsZVBvcHVwIiwicGxhY2VQb3B1cEZvcm0iLCJmb3JtIiwiaW1nUHJldmlldyIsInBsYWNlRm9ybSIsImVkaXRQcm9maWxlQnV0dG9uIiwiYWRkQ2FyZFBvcHVwIiwiYXZhdGFyIiwiYXZhdGFyRm9ybSIsImN1c3RvbUZldGNoIiwidXJsIiwiaGVhZGVycyIsImZldGNoIiwidGhlbiIsInJlcyIsIm9rIiwianNvbiIsIlByb21pc2UiLCJyZWplY3QiLCJzdGF0dXNUZXh0IiwiY2F0Y2giLCJlcnIiLCJhcGkiLCJiYXNlVXJsIiwiX2Jhc2VVcmwiLCJfaGVhZGVycyIsImdldEluaXRpYWxDYXJkcyIsImdldFVzZXJJbmZvIiwic2V0VXNlckluZm8iLCJhYm91dCIsIm1ldGhvZCIsImJvZHkiLCJKU09OIiwic3RyaW5naWZ5IiwiY3JlYXRlQ2FyZCIsImRlbGV0ZUNhcmQiLCJjYXJkSWQiLCJzZXRVc2VyQXZhdGFyIiwiYXV0aG9yaXphdGlvbiIsInBsYWNlc1NlY3Rpb24iLCJjb250YWluZXJTZWxlY3RvciIsInJlbmRlcmVyIiwiX3JlbmRlcmVyIiwiX2NvbnRhaW5lciIsInJlbmRlckl0ZW1zIiwiaXRlbXMiLCJpdGVtIiwiYWRkSXRlbSIsInByZXBlbmQiLCJyZW5kZXJDYXJkIiwiYWxsIiwiY2FyZHMiLCJ1c2VyRGF0YSIsInVzZXJJbmZvIiwidGl0bGUiLCJzZXRBdmF0YXJWaXNpYmxlIiwibmFtZVNlbGVjdG9yIiwiam9iU2VsZWN0b3IiLCJhdmF0YXJTZWxlY3RvciIsIl9wcm9maWxlTmFtZSIsIl9wcm9maWxlSm9iIiwiX2F2YXRhciIsInZpc2liaWxpdHkiLCJ2YWxpZGF0ZUNvbmZpZ3MiLCJwcm9maWxlRm9ybVZhbGlkYXRvciIsImFkZEZvcm1WYWxpZGF0b3IiLCJhdmF0YXJGb3JtVmFsaWRhdG9yIiwiZWxlbWVudCIsImNhcmQiLCJpbWFnZVBvcHVwIiwiZGVsZXRlUG9wdXAiLCJzZXRBY3Rpb24iLCJpbmZvIiwiZWRpdFBvcHVwIiwicG9wdXBBZGRDYXJkIiwicmVzZXRGb3JtQnV0dG9uIiwiYXZhdGFyUG9wdXAiLCJfcG9wdXBJbWFnZSIsIl9wb3B1cENhcHRpb24iLCJpbWFnZSIsInRleHQiLCJhY3Rpb24iXSwic291cmNlUm9vdCI6IiJ9