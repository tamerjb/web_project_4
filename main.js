!function(){"use strict";class e{constructor(e,t){this._form=t,this._inputSelector=e.inputSelector,this._submitButtonSelector=e.submitButtonSelector,this._inactiveButtonClass=e.inactiveButtonClass,this._inputErrorClass=e.inputErrorClass,this._errorClass=e.errorClass}_showInputError(e){const t=this._form.querySelector("#".concat(e.id,"-error"));t.textContent=e.validationMessage,t.classList.add(this._errorClass),e.classList.add(this._inputErrorClass)}_hideInputError(e){const t=this._form.querySelector("#".concat(e.id,"-error"));t.textContent="",t.classList.remove(this._errorClass),e.classList.remove(this._inputErrorClass)}_checkInputValidity(e){e.validity.valid?this._hideInputError(e):this._showInputError(e)}_hasValidInputs(){return this._inputList.every((e=>e.validity.valid))}_setEventListeners(){this._inputList=Array.from(this._form.querySelectorAll(this._inputSelector)),this._button=this._form.querySelector(this._submitButtonSelector),this.toggleButton(),this._inputList.forEach((e=>{e.addEventListener("input",(()=>{this._checkInputValidity(e),this.toggleButton()})),this.resetValidation()}))}toggleButton(){this._hasValidInputs()?(this._button.disabled=!1,this._button.classList.remove(this._inactiveButtonClass)):(this._button.disabled=!0,this._button.classList.add(this._inactiveButtonClass))}enableValidation(){this._form.addEventListener("submit",(e=>e.preventDefault())),this._setEventListeners()}resetValidation(){this.toggleButton(),this._inputList.forEach((e=>{this._hideInputError(e)}))}}function t(e,t,s){return t in e?Object.defineProperty(e,t,{value:s,enumerable:!0,configurable:!0,writable:!0}):e[t]=s,e}class s{constructor(e,s,r,i){let{handleCardClick:o,handleCardDelete:n,handleLikeCard:l}=r;t(this,"_getCloneFromTemplate",(()=>document.querySelector(this._selector).content.querySelector(".card").cloneNode(!0))),t(this,"_setEventListeners",(()=>{this._likeButton.addEventListener("click",(e=>{this._handleLikeCard(e)})),this._image.addEventListener("click",(()=>{this._handleCardClick(this._id)})),this._deleteButton.addEventListener("click",(()=>{this._handleCardDelete(this._id)}))})),this._text=e.name,this._link=e.link,this._selector=s,this._handleCardClick=o,this._handleCardDelete=n,this._handleLikeCard=l,this._id=e.id,this._userId=i,this._ownerId=e.owner._id,this._likes=e.likes,console.log("data.name",e.name)}likeCard(e){this._likeButton.classList.add("card__like-button_active"),this._likes=e,this._likeCount.textContent=this._likes.length}dislikeCard(e){this._likeButton.classList.remove("card__like-button_active"),this._likes=e,this._likeCount.textContent=this._likes.length}isLiked(){return this._likes.some((e=>e._id===this._userId))}removeCard(){this._element.remove(),this._element=null}generateCard(){return this._element=this._getCloneFromTemplate(),this._image=this._element.querySelector(".card__image"),this._element.querySelector(".card__info-title").textContent=this._text,this._image.src=this._link,this._image.alt="Place in ".concat(this._text),this._deleteButton=this._element.querySelector(".card__image-trash"),this._ownerId!==this._userId&&(this._deleteButton.style.display="none"),this._likeButton=this._element.querySelector(".card__like-button"),this._likeCount=this._element.querySelector(".card__like-count"),this._likeCount.textContent=this._likes.length,this.isLiked()&&this.likeCard(this._likes),this._setEventListeners(),this._element}}class r{constructor(e){this._popupElement=document.querySelector(e),this.close=this.close.bind(this),this._handleEscClose=this._handleEscClose.bind(this),this._overlayClose=this._overlayClose.bind(this)}_handleEscClose(e){"Escape"===e.key&&this.close()}open(){this._popupElement.classList.add("popup_opened"),document.addEventListener("keydown",this._handleEscClose),document.addEventListener("mousedown",this._overlayClose)}close(){this._popupElement.classList.remove("popup_opened"),document.removeEventListener("keydown",this._handleEscClose),document.removeEventListener("click",this._overlayClose)}_overlayClose(e){e.target.classList.contains("popup_opened")&&this.close()}setEventListeners(){this._popupElement.querySelector(".popup__close-button").addEventListener("click",this.close)}}class i extends r{constructor(e,t){var s,r;super(e),r=()=>{super.close(),this._formElement.reset()},(s="close")in this?Object.defineProperty(this,s,{value:r,enumerable:!0,configurable:!0,writable:!0}):this[s]=r,this._submitHandler=t,this._formElement=this._popupElement.querySelector(".popup__form"),this._inputs=[...this._formElement.querySelectorAll(".form__input")]}_getInputValues(){const e={};return this._inputs.forEach((t=>{e[t.name]=t.value})),e}setInputValues(e){this._inputs.forEach((t=>{t.value=e[t.name]})),console.log(this._inputs)}setEventListeners(){this._formElement.addEventListener("submit",(e=>{e.preventDefault(),this._submitHandler(this._getInputValues()),this.close()})),super.setEventListeners()}}document.querySelector(".form");const o=document.querySelector(".profile"),n=(o.querySelector(".profile__name"),document.querySelector(".popup")),l=(o.querySelector(".profile__title"),form.querySelector(".form__input[name='name']"),form.querySelector(".form__input[name='title']"),document.querySelector(".cards")),a=(document.querySelector("#card-template"),l.querySelector(".cards__list"),document.querySelector(".popup-edit-profile"),document.querySelector(".popup__form-type-add-place")),c=(a.querySelector(".form__input-type-place-name"),a.querySelector(".form__input-type-place-url"),document.querySelector(".popup-prev")),h=(c.querySelector(".popup__image"),c.querySelector(".popup__caption"),document.querySelector(".popup-place")),u=o.querySelector(".profile__edit-button"),d=o.querySelector(".profile__add-button"),_=(document.querySelectorAll(".popup__close-button"),(e,t)=>fetch(e,t).then((e=>e.ok?e.json():Promise.reject(e.statusText))).catch((e=>console.log()))),p=new class{constructor(e){let{baseUrl:t,headers:s}=e;this._baseUrl=t,this._headers=s}getInitialCards(){return _("".concat(this._baseUrl,"/cards"),{headers:this._headers})}getUserInfo(){return _("".concat(this._baseUrl,"/users/me"),{headers:this._headers})}setUserInfo(e){let{name:t,about:s}=e;return _("".concat(this._baseUrl,"/users/me"),{headers:this._headers,method:"PATCH",body:JSON.stringify({name:t,about:s})})}createCard(e){return _("".concat(this._baseUrl,"/cards"),{headers:this._headers,method:"POST",body:JSON.stringify(e)})}deleteCard(e){return _("".concat(this._baseUrl,"/cards/").concat(e),{headers:this._headers,method:"DELETE"})}likeCard(e){return console.log(e),_("".concat(this._baseUrl,"/cards/likes/").concat(e),{headers:this._headers,method:"PUT"})}dislikeCard(e){return _("".concat(this._baseUrl,"/cards/likes/").concat(e),{headers:this._headers,method:"DELETE"})}}({baseUrl:"https://around.nomoreparties.co/v1/cohort-3-en",headers:{authorization:"edde3a5c-b30d-40b0-99e9-6f72ee976ddf","Content-Type":"application/json"}}),m=new class{constructor(e,t){let{renderer:s}=e;this._renderer=s,this._container=document.querySelector(t)}renderItems(e){e.forEach((e=>{this._renderer(e)}))}addItem(e){this._container.prepend(e)}}({renderer:L},".cards__list");let C;Promise.all([p.getInitialCards(),p.getUserInfo()]).then((e=>{let[t,s]=e;C=s._id,m.renderItems(t),y.setUserInfo(s.name,s.about)})).catch((e=>console.log(e))),u.addEventListener("click",(()=>{const e=y.getUserInfo();k.setInputValues(e),f.enableValidation(),f.toggleButton(),k.open()})),d.addEventListener("click",(()=>{S.open(),b.resetValidation()}));const v={inputSelector:".form__input",submitButtonSelector:".form__button",inactiveButtonClass:"form__button_disabled",inputErrorClass:"form__input-error",errorClass:"form__input-error"},f=new e(v,n),b=new e(v,h);f.enableValidation(),b.enableValidation();const y=new class{constructor(e){let{nameSelector:t,jobSelector:s,avatarSelector:r}=e;this._profileName=document.querySelector(t),this._profileJob=document.querySelector(s),this._avatar=document.querySelector(r)}getUserInfo(){return{name:this._profileName.textContent,title:this._profileJob.textContent}}setUserInfo(e){let{name:t,job:s}=e;this._profileName.textContent=t,this._profileJob.textContent=s}setUserAvatar(e){this._avatar.src=e}setAvatarVisible(){this._avatar.style.visibility="visible"}}({nameSelector:".profile__name",jobSelector:".profile__title"}),E=new class extends r{constructor(e){super(e),this._popupImage=this._popupElement.querySelector(".popup__image"),this._popupCaption=this._popupElement.querySelector(".popup__caption")}open(e,t){this._popupImage.src=e,this._popupImage.alt="A view of ".concat(t),this._popupCaption.textContent=t,super.open()}}(".popup-prev");E.setEventListeners();const k=new i(".popup",(e=>{console.log("data =>",e),p.setUserInfo({name:e.name,about:e.title}).then((e=>{y.setUserInfo({name:e.name,about:e.title}),k.close()})).catch((e=>console.log(e)))}));k.setEventListeners();const S=new i(".popup-place",(e=>{p.createCard(e).then((e=>{L(e),S.close()})).catch((e=>console.log(e)))}));S.setEventListeners();const g=new class extends r{setAction(e){this._submitHandler=e}setEventListeners(){this._popupElement.addEventListener("submit",(e=>{e.preventDefault(),this._submitHandler()})),super.setEventListeners()}}(".popup-type-delete-card");function L(e){const t=function(e){const t=new s(e,"#card-template",{handleCardClick:()=>{E.open(e.link,e.text)},handleCardDelete:e=>{g.open(),g.setAction((()=>{p.deleteCard(e).then((e=>{t.removeCard()})).then((()=>{g.close()})).catch((e=>console.log(e)))}))},handleLikeCard:e=>{t.isLiked()?p.dislikeCard(e).then((e=>{t.dislikeCard(e.likes)})).catch((e=>console.log(e))):p.likeCard(e).then((e=>{t.likeCard(e.likes),console.log("res",e)})).catch((e=>console.log(e)))}},C);return t.generateCard()}(e);m.addItem(t)}g.setEventListeners()}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,