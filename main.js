!function(){"use strict";class e{constructor(e,t){this._form=t,this._inputSelector=e.inputSelector,this._submitButtonSelector=e.submitButtonSelector,this._inactiveButtonClass=e.inactiveButtonClass,this._inputErrorClass=e.inputErrorClass,this._errorClass=e.errorClass}_showInputError(e){const t=this._form.querySelector("#".concat(e.id,"-error"));t.textContent=e.validationMessage,t.classList.add(this._errorClass),e.classList.add(this._inputErrorClass)}_hideInputError(e){const t=this._form.querySelector("#".concat(e.id,"-error"));t.textContent="",t.classList.remove(this._errorClass),e.classList.remove(this._inputErrorClass)}_checkInputValidity(e){e.validity.valid?this._hideInputError(e):this._showInputError(e)}_hasValidInputs(){return this._inputList.every((e=>e.validity.valid))}_setEventListeners(){this._inputList=Array.from(this._form.querySelectorAll(this._inputSelector)),this._button=this._form.querySelector(this._submitButtonSelector),this.toggleButton(),this._inputList.forEach((e=>{e.addEventListener("input",(()=>{this._checkInputValidity(e),this.toggleButton()})),this.resetValidation()}))}toggleButton(){this._hasValidInputs()?(this._button.disabled=!1,this._button.classList.remove(this._inactiveButtonClass)):(this._button.disabled=!0,this._button.classList.add(this._inactiveButtonClass))}enableValidation(){this._form.addEventListener("submit",(e=>e.preventDefault())),this._setEventListeners()}resetValidation(){this.toggleButton(),this._inputList.forEach((e=>{this._hideInputError(e)}))}}function t(e,t,s){return t in e?Object.defineProperty(e,t,{value:s,enumerable:!0,configurable:!0,writable:!0}):e[t]=s,e}class s{constructor(e,s,r,i){let{handleCardClick:o,handleCardDelete:n,handleLikeCard:a}=r;t(this,"_getCloneFromTemplate",(()=>document.querySelector(this._selector).content.querySelector(".card").cloneNode(!0))),t(this,"_setEventListeners",(()=>{this._likeButton.addEventListener("click",(()=>{this._handleLikeCard(this._id)})),this._image.addEventListener("click",(()=>{this._handleCardClick(this._id)})),this._deleteButton.addEventListener("click",(()=>{this._handleCardDelete(this._id)}))})),this._text=e.name,this._link=e.link,this._selector=s,this._handleCardClick=o,this._handleCardDelete=n,this._handleLikeCard=a,this._id=e._id,this._userId=i,this._ownerId=e.owner._id,this._likes=e.likes}likeCard(e){this._likeButton.classList.add("card__like-button_active"),this._likes=e,this._likeCount.textContent=this._likes.length}dislikeCard(e){this._likeButton.classList.remove("card__like-button_active"),this._likes=e,this._likeCount.textContent=this._likes.length}isLiked(){return this._likes.some((e=>e._id===this._userId))}removeCard(){this._element.remove(),this._element=null}generateCard(){return this._element=this._getCloneFromTemplate(),this._image=this._element.querySelector(".card__image"),this._element.querySelector(".card__info-title").textContent=this._text,this._image.src=this._link,this._image.alt="Place in ".concat(this._text),this._deleteButton=this._element.querySelector(".card__image-trash"),this._ownerId!==this._userId&&(this._deleteButton.style.display="none"),this._likeButton=this._element.querySelector(".card__like-button"),this._likeCount=this._element.querySelector(".card__like-count"),this._likeCount.textContent=this._likes.length,this.isLiked()&&this.likeCard(this._likes),this._setEventListeners(),this._element}}function r(e,t,s){return t in e?Object.defineProperty(e,t,{value:s,enumerable:!0,configurable:!0,writable:!0}):e[t]=s,e}class i{constructor(e){r(this,"_handleEscClose",(e=>{"Escape"===e.key&&this.close()})),r(this,"_overlayClose",(e=>{e.target.classList.contains("popup")&&this.close()})),this._popupElement=document.querySelector(e),this.close=this.close.bind(this)}open(){this._popupElement.classList.add("popup_opened"),document.addEventListener("keydown",this._handleEscClose),document.addEventListener("mousedown",this._overlayClose)}close(){this._popupElement.classList.remove("popup_opened"),document.removeEventListener("keydown",this._handleEscClose),document.removeEventListener("click",this._overlayClose)}setEventListeners(){this._popupElement.querySelector(".popup__close-button").addEventListener("click",(()=>{this.close()}))}}class o extends i{constructor(e,t){var s,r;super(e),r=()=>{super.close(),this._formElement.reset()},(s="close")in this?Object.defineProperty(this,s,{value:r,enumerable:!0,configurable:!0,writable:!0}):this[s]=r,this._submitHandler=t,this._formElement=this._popupElement.querySelector(".popup__form"),this._inputs=[...this._formElement.querySelectorAll(".form__input")]}_getInputValues(){const e={};return this._inputs.forEach((t=>{e[t.name]=t.value})),e}setInputValues(e){this._inputs.forEach((t=>{t.value=e[t.name]})),console.log(this._inputs)}setEventListeners(){this._formElement.addEventListener("submit",(e=>{e.preventDefault(),this._submitHandler(this._getInputValues()),this.close()})),super.setEventListeners()}}document.querySelector(".form");const n=document.querySelector(".profile"),a=(n.querySelector(".profile__name"),document.querySelector(".popup-edit-profile")),l=(n.querySelector(".profile__title"),form.querySelector(".form__input[name='name']"),form.querySelector(".form__input[name='title']"),document.querySelector(".cards").querySelector(".cards__list"),document.querySelector(".popup__form-type-add-place")),c=(l.querySelector(".form__input-type-place-name"),l.querySelector(".form__input-type-place-url"),document.querySelector(".popup-prev")),u=(c.querySelector(".popup__image"),c.querySelector(".popup__caption"),document.querySelector(".popup-place")),h=n.querySelector(".profile__edit-button"),_=n.querySelector(".profile__add-button"),d=(document.querySelectorAll(".popup__close-button"),document.querySelector(".profile__image-container")),p=document.querySelector(".popup__form_type_avatar"),m=(e,t)=>fetch(e,t).then((e=>e.ok?e.json():Promise.reject(e.statusText))).catch((e=>console.log())),v=new class{constructor(e){let{baseUrl:t,headers:s}=e;this._baseUrl=t,this._headers=s}getInitialCards(){return m("".concat(this._baseUrl,"/cards"),{headers:this._headers})}getUserInfo(){return m("".concat(this._baseUrl,"/users/me"),{headers:this._headers})}setUserInfo(e){let{name:t,about:s}=e;return console.log("test",{name:t,about:s}),m("".concat(this._baseUrl,"/users/me"),{headers:this._headers,method:"PATCH",body:JSON.stringify({name:t,about:s})})}createCard(e){return m("".concat(this._baseUrl,"/cards"),{headers:this._headers,method:"POST",body:JSON.stringify(e)})}deleteCard(e){return m("".concat(this._baseUrl,"/cards/").concat(e),{headers:this._headers,method:"DELETE"})}likeCard(e){return m("".concat(this._baseUrl,"/cards/likes/").concat(e),{headers:this._headers,method:"PUT"})}dislikeCard(e){return m("".concat(this._baseUrl,"/cards/likes/").concat(e),{headers:this._headers,method:"DELETE"})}setUserAvatar(e){return m("".concat(this._baseUrl,"/users/me/avatar"),{headers:this._headers,method:"PATCH",body:JSON.stringify({avatar:e})})}}({baseUrl:"https://around.nomoreparties.co/v1/cohort-3-en",headers:{authorization:"edde3a5c-b30d-40b0-99e9-6f72ee976ddf","Content-Type":"application/json"}}),b=new class{constructor(e){let{nameSelector:t,jobSelector:s,avatarSelector:r}=e;this._profileName=document.querySelector(t),this._profileJob=document.querySelector(s),this._avatar=document.querySelector(r)}getUserInfo(){return{name:this._profileName.textContent,about:this._profileJob.textContent}}setUserInfo(e){let{name:t,about:s}=e;this._profileName.textContent=t,this._profileJob.textContent=s}setUserAvatar(e){this._avatar.src=e}setAvatarVisible(){this._avatar.style.visibility="visible"}}({nameSelector:".profile__name",jobSelector:".profile__title",avatarSelector:".profile__image"}),f=new class{constructor(e,t){let{renderer:s}=e;this._renderer=s,this._container=document.querySelector(t)}renderItems(e){e.forEach((e=>{this._renderer(e)}))}addItem(e){this._container.prepend(e)}}({renderer:w},".cards__list");let C;Promise.all([v.getInitialCards(),v.getUserInfo()]).then((e=>{let[t,s]=e;C=s._id,f.renderItems(t),b.setUserInfo(s.name,s.about),console.log(s),b.setUserAvatar(s.avatar)})).then((()=>b.setAvatarVisible())).catch((e=>console.log(e)));const y={inputSelector:".form__input",submitButtonSelector:".form__button",inactiveButtonClass:"form__button_disabled",inputErrorClass:"form__input-error",errorClass:"form__input-error"},E=new e(y,a);E.enableValidation();const k=new e(y,u);k.enableValidation();const g=new e(y,p);g.enableValidation();const S=new o(".popup",(e=>{console.log("data =>",e),v.setUserInfo({name:e.name,about:e.about}).then((e=>{b.getUserInfo(),b.setUserInfo({name:e.name,about:e.about}),S.close()})).catch((e=>console.log(e)))}));S.setEventListeners();const L=new o(".popup-place",(e=>{v.createCard(e).then((e=>{w(e),L.close()})).catch((e=>console.log(e)))}));L.setEventListeners();const q=new o(".popup_type_avatar",(e=>{v.setUserAvatar(e.link).then((e=>{b.setUserAvatar(e.avatar),q.close()})).catch((e=>console.log(e)))}));q.setEventListeners();const I=new class extends i{constructor(e){super(e),this._popupImage=this._popupElement.querySelector(".popup__image"),this._popupCaption=this._popupElement.querySelector(".popup__caption")}open(e,t){this._popupImage.src=e,this._popupImage.alt="A view of ".concat(t),this._popupCaption.textContent=t,super.open()}}(".popup-prev");I.setEventListeners();const U=new class extends i{setAction(e){this._submitHandler=e}setEventListeners(){this._popupElement.addEventListener("submit",(e=>{e.preventDefault(),this._submitHandler()})),super.setEventListeners()}}(".popup-type-delete-card");function w(e){const t=function(e){const t=new s(e,"#card-template",{handleCardClick:()=>{I.open(e.link,e.name)},handleCardDelete:e=>{U.open(),U.setAction((()=>{v.deleteCard(e).then((e=>{t.removeCard()})).then((()=>{U.close()})).catch((e=>console.log(e)))}))},handleLikeCard:e=>{t.isLiked()?v.dislikeCard(e).then((e=>{t.dislikeCard(e.likes)})).catch((e=>console.log(e))):v.likeCard(e).then((e=>{t.likeCard(e.likes),console.log("res",e)})).catch((e=>console.log(e)))}},C);return t.generateCard()}(e);f.addItem(t)}U.setEventListeners(),h.addEventListener("click",(()=>{const e=b.getUserInfo();S.setInputValues(e),E.enableValidation(),E.toggleButton(),S.open()})),_.addEventListener("click",(()=>{L.open(),k.resetValidation()})),d.addEventListener("click",(()=>{g.resetValidation(),q.open()}))}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFpbi5qcyIsIm1hcHBpbmdzIjoieUJBQU8sTUFBTUEsRUFDVEMsWUFBWUMsRUFBU0MsR0FDakJDLEtBQUtDLE1BQVFGLEVBQ2JDLEtBQUtFLGVBQWlCSixFQUFRSyxjQUM5QkgsS0FBS0ksc0JBQXdCTixFQUFRTyxxQkFDckNMLEtBQUtNLHFCQUF1QlIsRUFBUVMsb0JBQ3BDUCxLQUFLUSxpQkFBbUJWLEVBQVFXLGdCQUNoQ1QsS0FBS1UsWUFBY1osRUFBUWEsV0FHL0JDLGdCQUFnQkMsR0FDWixNQUFNQyxFQUFlZCxLQUFLQyxNQUFNYyxjQUFYLFdBQTZCRixFQUFNRyxHQUFuQyxXQUVyQkYsRUFBYUcsWUFBY0osRUFBTUssa0JBRWpDSixFQUFhSyxVQUFVQyxJQUFJcEIsS0FBS1UsYUFDaENHLEVBQU1NLFVBQVVDLElBQUlwQixLQUFLUSxrQkFFN0JhLGdCQUFnQlIsR0FDWixNQUFNQyxFQUFlZCxLQUFLQyxNQUFNYyxjQUFYLFdBQTZCRixFQUFNRyxHQUFuQyxXQUVyQkYsRUFBYUcsWUFBYyxHQUUzQkgsRUFBYUssVUFBVUcsT0FBT3RCLEtBQUtVLGFBQ25DRyxFQUFNTSxVQUFVRyxPQUFPdEIsS0FBS1Esa0JBR2hDZSxvQkFBb0JWLEdBQ1hBLEVBQU1XLFNBQVNDLE1BR2hCekIsS0FBS3FCLGdCQUFnQlIsR0FGckJiLEtBQUtZLGdCQUFnQkMsR0FPN0JhLGtCQUNJLE9BQU8xQixLQUFLMkIsV0FBV0MsT0FBT2YsR0FDbkJBLEVBQU1XLFNBQVNDLFFBSTlCSSxxQkFDSTdCLEtBQUsyQixXQUFhRyxNQUFNQyxLQUFLL0IsS0FBS0MsTUFBTStCLGlCQUFpQmhDLEtBQUtFLGlCQUM5REYsS0FBS2lDLFFBQVVqQyxLQUFLQyxNQUFNYyxjQUFjZixLQUFLSSx1QkFDN0NKLEtBQUtrQyxlQUNMbEMsS0FBSzJCLFdBQVdRLFNBQVN0QixJQUNyQkEsRUFBTXVCLGlCQUFpQixTQUFTLEtBQzVCcEMsS0FBS3VCLG9CQUFvQlYsR0FDekJiLEtBQUtrQyxrQkFFVGxDLEtBQUtxQyxxQkFJYkgsZUFDUWxDLEtBQUswQixtQkFDTDFCLEtBQUtpQyxRQUFRSyxVQUFXLEVBQ3hCdEMsS0FBS2lDLFFBQVFkLFVBQVVHLE9BQU90QixLQUFLTSx3QkFFbkNOLEtBQUtpQyxRQUFRSyxVQUFXLEVBQ3hCdEMsS0FBS2lDLFFBQVFkLFVBQVVDLElBQUlwQixLQUFLTSx1QkFJeENpQyxtQkFDSXZDLEtBQUtDLE1BQU1tQyxpQkFBaUIsVUFBV0ksR0FBTUEsRUFBRUMsbUJBQy9DekMsS0FBSzZCLHFCQUdUUSxrQkFDSXJDLEtBQUtrQyxlQUVMbEMsS0FBSzJCLFdBQVdRLFNBQVN0QixJQUNyQmIsS0FBS3FCLGdCQUFnQlIsTyx3SEMxRTFCLE1BQU02QixFQUNUN0MsWUFDSThDLEVBQ0FDLEVBRk8sRUFNSkMsR0FDTCxJQUxZLGdCQUNOQyxFQURNLGlCQUVOQyxFQUZNLGVBR05DLEdBRU4sa0NBWXNCLElBQ0FDLFNBQ2ZsQyxjQUFjZixLQUFLa0QsV0FDbkJDLFFBQVFwQyxjQUFjLFNBQ3RCcUMsV0FBVSxLQWhCakIsNkJBb0JtQixLQUVqQnBELEtBQUtxRCxZQUFZakIsaUJBQWlCLFNBQVMsS0FDdkNwQyxLQUFLc0QsZ0JBQWdCdEQsS0FBS3VELFFBRTlCdkQsS0FBS3dELE9BQU9wQixpQkFBaUIsU0FBUyxLQUNsQ3BDLEtBQUt5RCxpQkFBaUJ6RCxLQUFLdUQsUUFFL0J2RCxLQUFLMEQsY0FBY3RCLGlCQUFpQixTQUFTLEtBQ3pDcEMsS0FBSzJELGtCQUFrQjNELEtBQUt1RCxXQTVCaEN2RCxLQUFLNEQsTUFBUWpCLEVBQUtrQixLQUNsQjdELEtBQUs4RCxNQUFRbkIsRUFBS29CLEtBQ2xCL0QsS0FBS2tELFVBQVlOLEVBQ2pCNUMsS0FBS3lELGlCQUFtQlgsRUFDeEI5QyxLQUFLMkQsa0JBQW9CWixFQUN6Qi9DLEtBQUtzRCxnQkFBa0JOLEVBQ3ZCaEQsS0FBS3VELElBQU1aLEVBQUtZLElBQ2hCdkQsS0FBS2dFLFFBQVVuQixFQUNmN0MsS0FBS2lFLFNBQVd0QixFQUFLdUIsTUFBTVgsSUFDM0J2RCxLQUFLbUUsT0FBU3hCLEVBQUt5QixNQXdCdkJDLFNBQVNDLEdBQ0x0RSxLQUFLcUQsWUFBWWxDLFVBQVVDLElBQUksNEJBQy9CcEIsS0FBS21FLE9BQVNHLEVBQ2R0RSxLQUFLdUUsV0FBV3RELFlBQWNqQixLQUFLbUUsT0FBT0ssT0FHOUNDLFlBQVlILEdBQ1J0RSxLQUFLcUQsWUFBWWxDLFVBQVVHLE9BQU8sNEJBQ2xDdEIsS0FBS21FLE9BQVNHLEVBQ2R0RSxLQUFLdUUsV0FBV3RELFlBQWNqQixLQUFLbUUsT0FBT0ssT0FFOUNFLFVBQ0ksT0FBTzFFLEtBQUttRSxPQUFPUSxNQUFNQyxHQUFTQSxFQUFLckIsTUFBUXZELEtBQUtnRSxVQUd4RGEsYUFDSTdFLEtBQUs4RSxTQUFTeEQsU0FDZHRCLEtBQUs4RSxTQUFXLEtBR3BCQyxlQXNCSSxPQXJCQS9FLEtBQUs4RSxTQUFXOUUsS0FBS2dGLHdCQUNyQmhGLEtBQUt3RCxPQUFTeEQsS0FBSzhFLFNBQVMvRCxjQUFjLGdCQUcxQ2YsS0FBSzhFLFNBQVMvRCxjQUFjLHFCQUFxQkUsWUFBY2pCLEtBQUs0RCxNQUNwRTVELEtBQUt3RCxPQUFPeUIsSUFBTWpGLEtBQUs4RCxNQUN2QjlELEtBQUt3RCxPQUFPMEIsSUFBWixtQkFBOEJsRixLQUFLNEQsT0FFbkM1RCxLQUFLMEQsY0FBZ0IxRCxLQUFLOEUsU0FBUy9ELGNBQWMsc0JBR2pEZixLQUFLaUUsV0FBYWpFLEtBQUtnRSxVQUNsQmhFLEtBQUswRCxjQUFjeUIsTUFBTUMsUUFBVSxRQUN4Q3BGLEtBQUtxRCxZQUFjckQsS0FBSzhFLFNBQVMvRCxjQUFjLHNCQUMvQ2YsS0FBS3VFLFdBQWF2RSxLQUFLOEUsU0FBUy9ELGNBQWMscUJBQzlDZixLQUFLdUUsV0FBV3RELFlBQWNqQixLQUFLbUUsT0FBT0ssT0FFMUN4RSxLQUFLMEUsV0FBYTFFLEtBQUtxRSxTQUFTckUsS0FBS21FLFFBRXJDbkUsS0FBSzZCLHFCQUVFN0IsS0FBSzhFLFUsd0hDcEZiLE1BQU1PLEVBQ1R4RixZQUFZeUYsR0FBZSwwQkFJUkMsSUFDQyxXQUFaQSxFQUFJQyxLQUNKeEYsS0FBS3lGLFdBTmMsd0JBcUJWRixJQUNUQSxFQUFJRyxPQUFPdkUsVUFBVXdFLFNBQVMsVUFDOUIzRixLQUFLeUYsV0F0QlR6RixLQUFLNEYsY0FBZ0IzQyxTQUFTbEMsY0FBY3VFLEdBQzVDdEYsS0FBS3lGLE1BQVF6RixLQUFLeUYsTUFBTUksS0FBSzdGLE1BT2pDOEYsT0FDSTlGLEtBQUs0RixjQUFjekUsVUFBVUMsSUFBSSxnQkFDakM2QixTQUFTYixpQkFBaUIsVUFBV3BDLEtBQUsrRixpQkFDMUM5QyxTQUFTYixpQkFBaUIsWUFBYXBDLEtBQUtnRyxlQUdoRFAsUUFDSXpGLEtBQUs0RixjQUFjekUsVUFBVUcsT0FBTyxnQkFDcEMyQixTQUFTZ0Qsb0JBQW9CLFVBQVdqRyxLQUFLK0YsaUJBQzdDOUMsU0FBU2dELG9CQUFvQixRQUFTakcsS0FBS2dHLGVBUS9DRSxvQkFDSWxHLEtBQUs0RixjQUNBN0UsY0FBYyx3QkFDZHFCLGlCQUFpQixTQUFTLEtBQ3ZCcEMsS0FBS3lGLFlDNUJkLE1BQU1VLFVBQXNCZCxFQUMvQnhGLFlBQVl1RyxFQUFlQyxHLFFBQ3ZCQyxNQUFNRixHLEVBNEJGLEtBQ0pFLE1BQU1iLFFBQ056RixLQUFLdUcsYUFBYUMsVSxFQS9Cb0IsZ0Isc0JBQUEsSyx1REFBQSxLLEtBRXRDeEcsS0FBS3lHLGVBQWlCSixFQUN0QnJHLEtBQUt1RyxhQUFldkcsS0FBSzRGLGNBQWM3RSxjQUFjLGdCQUNyRGYsS0FBSzBHLFFBQVUsSUFBSTFHLEtBQUt1RyxhQUFhdkUsaUJBQWlCLGlCQUUxRDJFLGtCQUVJLE1BQU1DLEVBQWMsR0FJcEIsT0FIQTVHLEtBQUswRyxRQUFRdkUsU0FBU3RCLElBQ2xCK0YsRUFBWS9GLEVBQU1nRCxNQUFRaEQsRUFBTWdHLFNBRTdCRCxFQUdYRSxlQUFlbkUsR0FDWDNDLEtBQUswRyxRQUFRdkUsU0FBU3RCLElBQ2xCQSxFQUFNZ0csTUFBUWxFLEVBQUs5QixFQUFNZ0QsU0FFN0JrRCxRQUFRQyxJQUFJaEgsS0FBSzBHLFNBRXJCUixvQkFDSWxHLEtBQUt1RyxhQUFhbkUsaUJBQWlCLFVBQVdJLElBQzFDQSxFQUFFQyxpQkFDRnpDLEtBQUt5RyxlQUFlekcsS0FBSzJHLG1CQUN6QjNHLEtBQUt5RixXQUVUYSxNQUFNSixxQkM1QmFqRCxTQUFTbEMsY0FBYyxTQUEzQyxNQUNNa0csRUFBVWhFLFNBQVNsQyxjQUFjLFlBRWpDbUcsR0FEY0QsRUFBUWxHLGNBQWMsa0JBQ3JCa0MsU0FBU2xDLGNBQWMsd0JBUXRDb0csR0FQZUYsRUFBUWxHLGNBQWMsbUJBQ3pCcUcsS0FBS3JHLGNBQWMsNkJBQ2xCcUcsS0FBS3JHLGNBQWMsOEJBQ3hCa0MsU0FBU2xDLGNBQWMsVUFHZEEsY0FBYyxnQkFDZGtDLFNBQVNsQyxjQUFjLGdDQUd4Q3NHLEdBRk9GLEVBQWVwRyxjQUFjLGdDQUN6Qm9HLEVBQWVwRyxjQUFjLCtCQUMzQmtDLFNBQVNsQyxjQUFjLGdCQUtwQ3VHLEdBSmtCRCxFQUFXdEcsY0FBYyxpQkFDckJzRyxFQUFXdEcsY0FBYyxtQkFHbkNrQyxTQUFTbEMsY0FBYyxpQkFJbkN3RyxFQUFvQk4sRUFBUWxHLGNBQWMseUJBQzFDeUcsRUFBZVAsRUFBUWxHLGNBQWMsd0JBRXJDMEcsR0FEZXhFLFNBQVNqQixpQkFBaUIsd0JBQ2hDaUIsU0FBU2xDLGNBQWMsOEJBQ2hDMkcsRUFBYXpFLFNBQVNsQyxjQUFjLDRCQzlCM0M0RyxFQUFjLENBQUNDLEVBQUtDLElBQ2ZDLE1BQU1GLEVBQUtDLEdBQ2JFLE1BQUtDLEdBQU9BLEVBQUlDLEdBQUtELEVBQUlFLE9BQVNDLFFBQVFDLE9BQU9KLEVBQUlLLGNBQWFDLE9BQU1DLEdBQU94QixRQUFRQyxRQW1GbkZ3QixFQUFNLElBaEZuQixNQUNJM0ksWUFBWSxHQUdULElBSFMsUUFDUjRJLEVBRFEsUUFFUlosR0FDRCxFQUNDN0gsS0FBSzBJLFNBQVdELEVBQ2hCekksS0FBSzJJLFNBQVdkLEVBSXBCZSxrQkFDSSxPQUFPakIsRUFBWSxHQUFELE9BQUkzSCxLQUFLMEksU0FBVCxVQUEyQixDQUN6Q2IsUUFBUzdILEtBQUsySSxXQUd0QkUsY0FDSSxPQUFPbEIsRUFBWSxHQUFELE9BQUkzSCxLQUFLMEksU0FBVCxhQUE4QixDQUM1Q2IsUUFBUzdILEtBQUsySSxXQUd0QkcsWUFBWSxHQUdULElBSFMsS0FDUmpGLEVBRFEsTUFFUmtGLEdBQ0QsRUFNQyxPQUxBaEMsUUFBUUMsSUFBSSxPQUFRLENBQ2hCbkQsT0FDQWtGLFVBR0dwQixFQUFZLEdBQUQsT0FBSTNILEtBQUswSSxTQUFULGFBQThCLENBQzVDYixRQUFTN0gsS0FBSzJJLFNBQ2RLLE9BQVEsUUFDUkMsS0FBTUMsS0FBS0MsVUFBVSxDQUNqQnRGLEtBQU1BLEVBQ05rRixNQUFPQSxNQUluQkssV0FBV3pHLEdBQ1AsT0FBT2dGLEVBQVksR0FBRCxPQUFJM0gsS0FBSzBJLFNBQVQsVUFBMkIsQ0FDekNiLFFBQVM3SCxLQUFLMkksU0FDZEssT0FBUSxPQUNSQyxLQUFNQyxLQUFLQyxVQUFVeEcsS0FJN0IwRyxXQUFXQyxHQUNQLE9BQU8zQixFQUFZLEdBQUQsT0FBSTNILEtBQUswSSxTQUFULGtCQUEyQlksR0FBVSxDQUNuRHpCLFFBQVM3SCxLQUFLMkksU0FDZEssT0FBUSxXQUdoQjNFLFNBQVNpRixHQUVMLE9BQU8zQixFQUFZLEdBQUQsT0FBSTNILEtBQUswSSxTQUFULHdCQUFpQ1ksR0FBVSxDQUN6RHpCLFFBQVM3SCxLQUFLMkksU0FDZEssT0FBUSxRQUloQnZFLFlBQVk2RSxHQUNSLE9BQU8zQixFQUFZLEdBQUQsT0FBSTNILEtBQUswSSxTQUFULHdCQUFpQ1ksR0FBVSxDQUN6RHpCLFFBQVM3SCxLQUFLMkksU0FDZEssT0FBUSxXQUdoQk8sY0FBYzNCLEdBQ1YsT0FBT0QsRUFBWSxHQUFELE9BQUkzSCxLQUFLMEksU0FBVCxvQkFBcUMsQ0FDbkRiLFFBQVM3SCxLQUFLMkksU0FDZEssT0FBUSxRQUNSQyxLQUFNQyxLQUFLQyxVQUFVLENBQ2pCMUIsT0FBUUcsUUFTRyxDQUN2QmEsUUFBUyxpREFDVFosUUFBUyxDQUNMMkIsY0FBZSx1Q0FDZixlQUFnQixzQkNibEJDLEVBQVcsSUM1RVYsTUFDSDVKLFlBQVksR0FJVCxJQUpTLGFBQ1I2SixFQURRLFlBRVJDLEVBRlEsZUFHUkMsR0FDRCxFQUNDNUosS0FBSzZKLGFBQWU1RyxTQUFTbEMsY0FBYzJJLEdBQzNDMUosS0FBSzhKLFlBQWM3RyxTQUFTbEMsY0FBYzRJLEdBQzFDM0osS0FBSytKLFFBQVU5RyxTQUFTbEMsY0FBYzZJLEdBRzFDZixjQUNJLE1BQU8sQ0FDSGhGLEtBQU03RCxLQUFLNkosYUFBYTVJLFlBQ3hCOEgsTUFBTy9JLEtBQUs4SixZQUFZN0ksYUFHaEM2SCxZQUFZLEdBR1QsSUFIUyxLQUNSakYsRUFEUSxNQUVSa0YsR0FDRCxFQUNDL0ksS0FBSzZKLGFBQWE1SSxZQUFjNEMsRUFDaEM3RCxLQUFLOEosWUFBWTdJLFlBQWM4SCxFQUVuQ1EsY0FBYzlCLEdBQ1Z6SCxLQUFLK0osUUFBUTlFLElBQU13QyxFQUd2QnVDLG1CQUNJaEssS0FBSytKLFFBQVE1RSxNQUFNOEUsV0FBYSxZRCtDVixDQUM1QlAsYUFBYyxpQkFDZEMsWUFBYSxrQkFDYkMsZUFBZ0Isb0JBR1pNLEVBQWdCLElFbEZmLE1BQ0hySyxZQUFZLEVBRVRzSyxHQUFtQixJQUZWLFNBQ1JDLEdBQ2tCLEVBRWxCcEssS0FBS3FLLFVBQVlELEVBQ2pCcEssS0FBS3NLLFdBQWFySCxTQUFTbEMsY0FBY29KLEdBRTdDSSxZQUFZQyxHQUNSQSxFQUFNckksU0FBU3NJLElBQ1h6SyxLQUFLcUssVUFBVUksTUFHdkJDLFFBQVFELEdBQ0p6SyxLQUFLc0ssV0FBV0ssUUFBUUYsS0ZvRUUsQ0FDOUJMLFNBQVVRLEdBRVosZ0JBSUYsSUFBSS9ILEVBQ0pzRixRQUFRMEMsSUFBSSxDQUFDckMsRUFBSUksa0JBQW1CSixFQUFJSyxnQkFDckNkLE1BQUssSUFBdUIsSUFBckIrQyxFQUFPQyxHQUFjLEVBQzNCbEksRUFBU2tJLEVBQVN4SCxJQUNsQjJHLEVBQWNLLFlBQVlPLEdBQzFCckIsRUFBU1gsWUFBWWlDLEVBQVNsSCxLQUFNa0gsRUFBU2hDLE9BQzdDaEMsUUFBUUMsSUFBSStELEdBQ1p0QixFQUFTRixjQUFjd0IsRUFBU3RELFdBRWpDTSxNQUFLLElBQU0wQixFQUFTTyxxQkFDcEIxQixPQUFPQyxHQUFReEIsUUFBUUMsSUFBSXVCLEtBWTlCLE1BQU15QyxFQUFrQixDQUN0QjdLLGNBQWUsZUFDZkUscUJBQXNCLGdCQUN0QkUsb0JBQXFCLHdCQUNyQkUsZ0JBQWlCLG9CQUNqQkUsV0FBWSxxQkFHUnNLLEVBQXVCLElBQUlyTCxFQUMvQm9MLEVBQ0E5RCxHQUVGK0QsRUFBcUIxSSxtQkFFckIsTUFBTTJJLEVBQW1CLElBQUl0TCxFQUFjb0wsRUFBaUIxRCxHQUM1RDRELEVBQWlCM0ksbUJBRWpCLE1BQU00SSxFQUFzQixJQUFJdkwsRUFDOUJvTCxFQUNBdEQsR0FFRnlELEVBQW9CNUksbUJBU3BCLE1BQU02SSxFQUFZLElBQUlqRixFQUFjLFVBQVd4RCxJQUM3Q29FLFFBQVFDLElBQUksVUFBV3JFLEdBQ3ZCNkYsRUFBQUEsWUFDZSxDQUNYM0UsS0FBTWxCLEVBQUtrQixLQUNYa0YsTUFBT3BHLEVBQUtvRyxRQUdiaEIsTUFBTUMsSUFDTHlCLEVBQVNaLGNBQ1RZLEVBQVNYLFlBQVksQ0FDbkJqRixLQUFNbUUsRUFBSW5FLEtBQ1ZrRixNQUFPZixFQUFJZSxRQUdicUMsRUFBVTNGLFdBRVg2QyxPQUFPQyxHQUFReEIsUUFBUUMsSUFBSXVCLFFBRWhDNkMsRUFBVWxGLG9CQUdWLE1BQU1tRixFQUFlLElBQUlsRixFQUFjLGdCQUFpQnhELElBQ3RENkYsRUFBQUEsV0FDYzdGLEdBQ1hvRixNQUFNQyxJQUNMNEMsRUFBVzVDLEdBQ1hxRCxFQUFhNUYsV0FFZDZDLE9BQU9DLEdBQVF4QixRQUFRQyxJQUFJdUIsUUFFaEM4QyxFQUFhbkYsb0JBR2IsTUFBTW9GLEVBQWMsSUFBSW5GLEVBQWMsc0JBQXVCeEQsSUFFM0Q2RixFQUFBQSxjQUNpQjdGLEVBQUtvQixNQUNuQmdFLE1BQU1DLElBQ0x5QixFQUFTRixjQUFjdkIsRUFBSVAsUUFDM0I2RCxFQUFZN0YsV0FFYjZDLE9BQU9DLEdBQVF4QixRQUFRQyxJQUFJdUIsUUFHaEMrQyxFQUFZcEYsb0JBQ1osTUFBTXFGLEVBQWEsSUd4TFosY0FBNkJsRyxFQUNoQ3hGLFlBQVl5RixHQUNSZ0IsTUFBTWhCLEdBQ050RixLQUFLd0wsWUFBY3hMLEtBQUs0RixjQUFjN0UsY0FBYyxpQkFDcERmLEtBQUt5TCxjQUFnQnpMLEtBQUs0RixjQUFjN0UsY0FBYyxtQkFHMUQrRSxLQUFLNEYsRUFBT0MsR0FFUjNMLEtBQUt3TCxZQUFZdkcsSUFBTXlHLEVBQ3ZCMUwsS0FBS3dMLFlBQVl0RyxJQUFqQixvQkFBb0N5RyxHQUNwQzNMLEtBQUt5TCxjQUFjeEssWUFBYzBLLEVBQ2pDckYsTUFBTVIsU0g0S3dCLGVBQ3RDeUYsRUFBV3JGLG9CQVNYLE1BQU0wRixFQUFjLElJak1iLGNBQThCdkcsRUFDakN3RyxVQUFVQyxHQUNOOUwsS0FBS3lHLGVBQWlCcUYsRUFHMUI1RixvQkFDSWxHLEtBQUs0RixjQUFjeEQsaUJBQWlCLFVBQVdJLElBQzNDQSxFQUFFQyxpQkFDRnpDLEtBQUt5RyxvQkFFVEgsTUFBTUosc0JKdUwwQiwyQkE0RHhDLFNBQVMwRSxFQUFXakksR0FDbEIsTUFBTW9KLEVBMURSLFNBQXNCcEosR0FDcEIsTUFBTXFKLEVBQU8sSUFBSXRKLEVBQ2ZDLEVGbkxnQyxpQkVvTFYsQ0FDcEJHLGdCQUFpQixLQUNmeUksRUFBV3pGLEtBQUtuRCxFQUFLb0IsS0FBTXBCLEVBQUtrQixPQUdsQ2QsaUJBQW1CL0IsSUFDakI0SyxFQUFZOUYsT0FFWjhGLEVBQVlDLFdBQVUsS0FFcEJyRCxFQUFBQSxXQUNjeEgsR0FDWCtHLE1BQU1DLElBQ0xnRSxFQUFLbkgsZ0JBRU5rRCxNQUFLLEtBQ0o2RCxFQUFZbkcsV0FFYjZDLE9BQU9DLEdBQVF4QixRQUFRQyxJQUFJdUIsU0FHbEN2RixlQUFpQmhDLElBQ0RnTCxFQUFLdEgsVUFjakI4RCxFQUFBQSxZQUNleEgsR0FDWitHLE1BQU1DLElBQ0xnRSxFQUFLdkgsWUFBWXVELEVBQUk1RCxVQUV0QmtFLE9BQU9DLEdBQVF4QixRQUFRQyxJQUFJdUIsS0FoQjlCQyxFQUFBQSxTQUNZeEgsR0FDVCtHLE1BQU1DLElBQ0xnRSxFQUFLM0gsU0FBUzJELEVBQUk1RCxPQUNsQjJDLFFBQVFDLElBQUksTUFBT2dCLE1BRXBCTSxPQUFPQyxHQUFReEIsUUFBUUMsSUFBSXVCLE9BY3BDMUYsR0FHRixPQURvQm1KLEVBQUtqSCxlQVFUQSxDQUFhcEMsR0FDN0J1SCxFQUFjUSxRQUFRcUIsR0E3RHhCSCxFQUFZMUYsb0JBcUVacUIsRUFBa0JuRixpQkFBaUIsU0FBUyxLQUMxQyxNQUFNNkosRUFBT3hDLEVBQVNaLGNBQ3RCdUMsRUFBVXRFLGVBQWVtRixHQUN6QmhCLEVBQXFCMUksbUJBQ3JCMEksRUFBcUIvSSxlQUNyQmtKLEVBQVV0RixVQUlaMEIsRUFBYXBGLGlCQUFpQixTQUFTLEtBQ3JDaUosRUFBYXZGLE9BQ2JvRixFQUFpQjdJLHFCQUduQm9GLEVBQU9yRixpQkFBaUIsU0FBUyxLQUMvQitJLEVBQW9COUksa0JBQ3BCaUosRUFBWXhGLFUiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly93ZWJfcHJvamVjdF80Ly4vc3JjL2NvbXBvbmVudHMvRm9ybVZhbGlkYXRvci5qcyIsIndlYnBhY2s6Ly93ZWJfcHJvamVjdF80Ly4vc3JjL2NvbXBvbmVudHMvQ2FyZC5qcyIsIndlYnBhY2s6Ly93ZWJfcHJvamVjdF80Ly4vc3JjL2NvbXBvbmVudHMvUG9wdXAuanMiLCJ3ZWJwYWNrOi8vd2ViX3Byb2plY3RfNC8uL3NyYy9jb21wb25lbnRzL1BvcHVwV2l0aEZvcm0uanMiLCJ3ZWJwYWNrOi8vd2ViX3Byb2plY3RfNC8uL3NyYy91dGlscy9jb25zdGFudHMuanMiLCJ3ZWJwYWNrOi8vd2ViX3Byb2plY3RfNC8uL3NyYy9jb21wb25lbnRzL0FwaS5qcyIsIndlYnBhY2s6Ly93ZWJfcHJvamVjdF80Ly4vc3JjL3BhZ2VzL2luZGV4LmpzIiwid2VicGFjazovL3dlYl9wcm9qZWN0XzQvLi9zcmMvY29tcG9uZW50cy9Vc2VySW5mby5qcyIsIndlYnBhY2s6Ly93ZWJfcHJvamVjdF80Ly4vc3JjL2NvbXBvbmVudHMvU2VjdGlvbi5qcyIsIndlYnBhY2s6Ly93ZWJfcHJvamVjdF80Ly4vc3JjL2NvbXBvbmVudHMvUG9wdXBXaXRoSW1hZ2UuanMiLCJ3ZWJwYWNrOi8vd2ViX3Byb2plY3RfNC8uL3NyYy9jb21wb25lbnRzL1BvcHVwV2l0aFN1Ym1pdC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgY2xhc3MgRm9ybVZhbGlkYXRvciB7XG4gICAgY29uc3RydWN0b3IoY29uZmlncywgZm9ybUVsZW1lbnQpIHtcbiAgICAgICAgdGhpcy5fZm9ybSA9IGZvcm1FbGVtZW50O1xuICAgICAgICB0aGlzLl9pbnB1dFNlbGVjdG9yID0gY29uZmlncy5pbnB1dFNlbGVjdG9yO1xuICAgICAgICB0aGlzLl9zdWJtaXRCdXR0b25TZWxlY3RvciA9IGNvbmZpZ3Muc3VibWl0QnV0dG9uU2VsZWN0b3I7XG4gICAgICAgIHRoaXMuX2luYWN0aXZlQnV0dG9uQ2xhc3MgPSBjb25maWdzLmluYWN0aXZlQnV0dG9uQ2xhc3M7XG4gICAgICAgIHRoaXMuX2lucHV0RXJyb3JDbGFzcyA9IGNvbmZpZ3MuaW5wdXRFcnJvckNsYXNzO1xuICAgICAgICB0aGlzLl9lcnJvckNsYXNzID0gY29uZmlncy5lcnJvckNsYXNzO1xuXG4gICAgfVxuICAgIF9zaG93SW5wdXRFcnJvcihpbnB1dCkge1xuICAgICAgICBjb25zdCBlcnJvckVsZW1lbnQgPSB0aGlzLl9mb3JtLnF1ZXJ5U2VsZWN0b3IoYCMke2lucHV0LmlkfS1lcnJvcmApO1xuICAgICAgICAvLyBhZGQgZXJyb3IgbXNnL2NsYXNzXG4gICAgICAgIGVycm9yRWxlbWVudC50ZXh0Q29udGVudCA9IGlucHV0LnZhbGlkYXRpb25NZXNzYWdlO1xuICAgICAgICAvLyBpbnB1dC5jbGFzc0xpc3QuYWRkKGVycm9yQ2xhc3MpO1xuICAgICAgICBlcnJvckVsZW1lbnQuY2xhc3NMaXN0LmFkZCh0aGlzLl9lcnJvckNsYXNzKTtcbiAgICAgICAgaW5wdXQuY2xhc3NMaXN0LmFkZCh0aGlzLl9pbnB1dEVycm9yQ2xhc3MpXG4gICAgfVxuICAgIF9oaWRlSW5wdXRFcnJvcihpbnB1dCkge1xuICAgICAgICBjb25zdCBlcnJvckVsZW1lbnQgPSB0aGlzLl9mb3JtLnF1ZXJ5U2VsZWN0b3IoYCMke2lucHV0LmlkfS1lcnJvcmApO1xuICAgICAgICAvLyBhZGQgZXJyb3IgbXNnL2NsYXNzXG4gICAgICAgIGVycm9yRWxlbWVudC50ZXh0Q29udGVudCA9IFwiXCI7XG4gICAgICAgIC8vIGlucHV0LmNsYXNzTGlzdC5yZW1vdmUoZXJyb3JDbGFzcyk7XG4gICAgICAgIGVycm9yRWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKHRoaXMuX2Vycm9yQ2xhc3MpO1xuICAgICAgICBpbnB1dC5jbGFzc0xpc3QucmVtb3ZlKHRoaXMuX2lucHV0RXJyb3JDbGFzcyk7XG5cbiAgICB9XG4gICAgX2NoZWNrSW5wdXRWYWxpZGl0eShpbnB1dCkge1xuICAgICAgICBpZiAoIWlucHV0LnZhbGlkaXR5LnZhbGlkKSB7XG4gICAgICAgICAgICB0aGlzLl9zaG93SW5wdXRFcnJvcihpbnB1dCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLl9oaWRlSW5wdXRFcnJvcihpbnB1dCk7XG5cbiAgICAgICAgfVxuXG4gICAgfVxuICAgIF9oYXNWYWxpZElucHV0cygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2lucHV0TGlzdC5ldmVyeSgoaW5wdXQpID0+IHtcbiAgICAgICAgICAgIHJldHVybiBpbnB1dC52YWxpZGl0eS52YWxpZDtcbiAgICAgICAgfSlcblxuICAgIH1cbiAgICBfc2V0RXZlbnRMaXN0ZW5lcnMoKSB7XG4gICAgICAgIHRoaXMuX2lucHV0TGlzdCA9IEFycmF5LmZyb20odGhpcy5fZm9ybS5xdWVyeVNlbGVjdG9yQWxsKHRoaXMuX2lucHV0U2VsZWN0b3IpKTtcbiAgICAgICAgdGhpcy5fYnV0dG9uID0gdGhpcy5fZm9ybS5xdWVyeVNlbGVjdG9yKHRoaXMuX3N1Ym1pdEJ1dHRvblNlbGVjdG9yKTtcbiAgICAgICAgdGhpcy50b2dnbGVCdXR0b24oKTtcbiAgICAgICAgdGhpcy5faW5wdXRMaXN0LmZvckVhY2goKGlucHV0KSA9PiB7XG4gICAgICAgICAgICBpbnB1dC5hZGRFdmVudExpc3RlbmVyKFwiaW5wdXRcIiwgKCkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMuX2NoZWNrSW5wdXRWYWxpZGl0eShpbnB1dCk7XG4gICAgICAgICAgICAgICAgdGhpcy50b2dnbGVCdXR0b24oKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgdGhpcy5yZXNldFZhbGlkYXRpb24oKTtcblxuICAgICAgICB9KTtcbiAgICB9XG4gICAgdG9nZ2xlQnV0dG9uKCkge1xuICAgICAgICBpZiAodGhpcy5faGFzVmFsaWRJbnB1dHMoKSkge1xuICAgICAgICAgICAgdGhpcy5fYnV0dG9uLmRpc2FibGVkID0gZmFsc2U7XG4gICAgICAgICAgICB0aGlzLl9idXR0b24uY2xhc3NMaXN0LnJlbW92ZSh0aGlzLl9pbmFjdGl2ZUJ1dHRvbkNsYXNzKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuX2J1dHRvbi5kaXNhYmxlZCA9IHRydWU7XG4gICAgICAgICAgICB0aGlzLl9idXR0b24uY2xhc3NMaXN0LmFkZCh0aGlzLl9pbmFjdGl2ZUJ1dHRvbkNsYXNzKTtcbiAgICAgICAgfVxuXG4gICAgfVxuICAgIGVuYWJsZVZhbGlkYXRpb24oKSB7XG4gICAgICAgIHRoaXMuX2Zvcm0uYWRkRXZlbnRMaXN0ZW5lcihcInN1Ym1pdFwiLCAoZSkgPT4gZS5wcmV2ZW50RGVmYXVsdCgpKTtcbiAgICAgICAgdGhpcy5fc2V0RXZlbnRMaXN0ZW5lcnMoKTtcbiAgICB9XG5cbiAgICByZXNldFZhbGlkYXRpb24oKSB7XG4gICAgICAgIHRoaXMudG9nZ2xlQnV0dG9uKCk7IC8vIDw9ID0gY29udHJvbGxpbmcgdGhlIHN1Ym1pdCBidXR0b24gPT1cblxuICAgICAgICB0aGlzLl9pbnB1dExpc3QuZm9yRWFjaCgoaW5wdXQpID0+IHtcbiAgICAgICAgICAgIHRoaXMuX2hpZGVJbnB1dEVycm9yKGlucHV0KSAvLzw9ID0gY2xlYXJpbmcgZXJyb3JzID09XG4gICAgICAgIH0pO1xuXG4gICAgfVxuXG59IiwiZXhwb3J0IGNsYXNzIENhcmQge1xuICAgIGNvbnN0cnVjdG9yKFxuICAgICAgICBkYXRhLFxuICAgICAgICBzZWxlY3Rvciwge1xuICAgICAgICAgICAgaGFuZGxlQ2FyZENsaWNrLFxuICAgICAgICAgICAgaGFuZGxlQ2FyZERlbGV0ZSxcbiAgICAgICAgICAgIGhhbmRsZUxpa2VDYXJkLFxuICAgICAgICB9LCB1c2VySWRcbiAgICApIHtcbiAgICAgICAgdGhpcy5fdGV4dCA9IGRhdGEubmFtZTtcbiAgICAgICAgdGhpcy5fbGluayA9IGRhdGEubGluaztcbiAgICAgICAgdGhpcy5fc2VsZWN0b3IgPSBzZWxlY3RvcjtcbiAgICAgICAgdGhpcy5faGFuZGxlQ2FyZENsaWNrID0gaGFuZGxlQ2FyZENsaWNrO1xuICAgICAgICB0aGlzLl9oYW5kbGVDYXJkRGVsZXRlID0gaGFuZGxlQ2FyZERlbGV0ZTtcbiAgICAgICAgdGhpcy5faGFuZGxlTGlrZUNhcmQgPSBoYW5kbGVMaWtlQ2FyZDtcbiAgICAgICAgdGhpcy5faWQgPSBkYXRhLl9pZDtcbiAgICAgICAgdGhpcy5fdXNlcklkID0gdXNlcklkO1xuICAgICAgICB0aGlzLl9vd25lcklkID0gZGF0YS5vd25lci5faWQ7XG4gICAgICAgIHRoaXMuX2xpa2VzID0gZGF0YS5saWtlcztcbiAgICB9XG4gICAgX2dldENsb25lRnJvbVRlbXBsYXRlID0gKCkgPT4ge1xuICAgICAgICBjb25zdCBjYXJkRWxlbWVudCA9IGRvY3VtZW50XG4gICAgICAgICAgICAucXVlcnlTZWxlY3Rvcih0aGlzLl9zZWxlY3RvcilcbiAgICAgICAgICAgIC5jb250ZW50LnF1ZXJ5U2VsZWN0b3IoXCIuY2FyZFwiKVxuICAgICAgICAgICAgLmNsb25lTm9kZSh0cnVlKTtcbiAgICAgICAgcmV0dXJuIGNhcmRFbGVtZW50O1xuICAgIH1cblxuICAgIF9zZXRFdmVudExpc3RlbmVycyA9ICgpID0+IHtcblxuICAgICAgICB0aGlzLl9saWtlQnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLl9oYW5kbGVMaWtlQ2FyZCh0aGlzLl9pZCk7XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLl9pbWFnZS5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5faGFuZGxlQ2FyZENsaWNrKHRoaXMuX2lkKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuX2RlbGV0ZUJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5faGFuZGxlQ2FyZERlbGV0ZSh0aGlzLl9pZCk7XG5cbiAgICAgICAgfSlcbiAgICB9XG5cbiAgICBsaWtlQ2FyZChuZXdMaWtlcykge1xuICAgICAgICB0aGlzLl9saWtlQnV0dG9uLmNsYXNzTGlzdC5hZGQoXCJjYXJkX19saWtlLWJ1dHRvbl9hY3RpdmVcIik7XG4gICAgICAgIHRoaXMuX2xpa2VzID0gbmV3TGlrZXM7XG4gICAgICAgIHRoaXMuX2xpa2VDb3VudC50ZXh0Q29udGVudCA9IHRoaXMuX2xpa2VzLmxlbmd0aDtcbiAgICB9XG5cbiAgICBkaXNsaWtlQ2FyZChuZXdMaWtlcykge1xuICAgICAgICB0aGlzLl9saWtlQnV0dG9uLmNsYXNzTGlzdC5yZW1vdmUoXCJjYXJkX19saWtlLWJ1dHRvbl9hY3RpdmVcIik7XG4gICAgICAgIHRoaXMuX2xpa2VzID0gbmV3TGlrZXM7XG4gICAgICAgIHRoaXMuX2xpa2VDb3VudC50ZXh0Q29udGVudCA9IHRoaXMuX2xpa2VzLmxlbmd0aDtcbiAgICB9XG4gICAgaXNMaWtlZCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2xpa2VzLnNvbWUoKGxpa2UpID0+IGxpa2UuX2lkID09PSB0aGlzLl91c2VySWQpO1xuICAgIH1cblxuICAgIHJlbW92ZUNhcmQoKSB7XG4gICAgICAgIHRoaXMuX2VsZW1lbnQucmVtb3ZlKCk7XG4gICAgICAgIHRoaXMuX2VsZW1lbnQgPSBudWxsO1xuXG4gICAgfVxuICAgIGdlbmVyYXRlQ2FyZCgpIHtcbiAgICAgICAgdGhpcy5fZWxlbWVudCA9IHRoaXMuX2dldENsb25lRnJvbVRlbXBsYXRlKCk7XG4gICAgICAgIHRoaXMuX2ltYWdlID0gdGhpcy5fZWxlbWVudC5xdWVyeVNlbGVjdG9yKFwiLmNhcmRfX2ltYWdlXCIpO1xuXG5cbiAgICAgICAgdGhpcy5fZWxlbWVudC5xdWVyeVNlbGVjdG9yKFwiLmNhcmRfX2luZm8tdGl0bGVcIikudGV4dENvbnRlbnQgPSB0aGlzLl90ZXh0O1xuICAgICAgICB0aGlzLl9pbWFnZS5zcmMgPSB0aGlzLl9saW5rO1xuICAgICAgICB0aGlzLl9pbWFnZS5hbHQgPSBgUGxhY2UgaW4gJHt0aGlzLl90ZXh0fWA7XG5cbiAgICAgICAgdGhpcy5fZGVsZXRlQnV0dG9uID0gdGhpcy5fZWxlbWVudC5xdWVyeVNlbGVjdG9yKFwiLmNhcmRfX2ltYWdlLXRyYXNoXCIpO1xuXG5cbiAgICAgICAgdGhpcy5fb3duZXJJZCAhPT0gdGhpcy5fdXNlcklkICYmXG4gICAgICAgICAgICAodGhpcy5fZGVsZXRlQnV0dG9uLnN0eWxlLmRpc3BsYXkgPSBcIm5vbmVcIik7XG4gICAgICAgIHRoaXMuX2xpa2VCdXR0b24gPSB0aGlzLl9lbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuY2FyZF9fbGlrZS1idXR0b25cIik7XG4gICAgICAgIHRoaXMuX2xpa2VDb3VudCA9IHRoaXMuX2VsZW1lbnQucXVlcnlTZWxlY3RvcihcIi5jYXJkX19saWtlLWNvdW50XCIpO1xuICAgICAgICB0aGlzLl9saWtlQ291bnQudGV4dENvbnRlbnQgPSB0aGlzLl9saWtlcy5sZW5ndGg7XG5cbiAgICAgICAgdGhpcy5pc0xpa2VkKCkgJiYgdGhpcy5saWtlQ2FyZCh0aGlzLl9saWtlcyk7XG5cbiAgICAgICAgdGhpcy5fc2V0RXZlbnRMaXN0ZW5lcnMoKTtcblxuICAgICAgICByZXR1cm4gdGhpcy5fZWxlbWVudDtcbiAgICB9XG59IiwiZXhwb3J0IGNsYXNzIFBvcHVwIHtcbiAgICBjb25zdHJ1Y3Rvcihwb3B1cFNlbGVjdG9yKSB7XG4gICAgICAgIHRoaXMuX3BvcHVwRWxlbWVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IocG9wdXBTZWxlY3Rvcik7XG4gICAgICAgIHRoaXMuY2xvc2UgPSB0aGlzLmNsb3NlLmJpbmQodGhpcyk7XG4gICAgfVxuICAgIF9oYW5kbGVFc2NDbG9zZSA9IChldnQpID0+IHtcbiAgICAgICAgaWYgKGV2dC5rZXkgPT09IFwiRXNjYXBlXCIpIHtcbiAgICAgICAgICAgIHRoaXMuY2xvc2UoKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBvcGVuKCkge1xuICAgICAgICB0aGlzLl9wb3B1cEVsZW1lbnQuY2xhc3NMaXN0LmFkZChcInBvcHVwX29wZW5lZFwiKTtcbiAgICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcImtleWRvd25cIiwgdGhpcy5faGFuZGxlRXNjQ2xvc2UpO1xuICAgICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKFwibW91c2Vkb3duXCIsIHRoaXMuX292ZXJsYXlDbG9zZSk7XG5cbiAgICB9XG4gICAgY2xvc2UoKSB7XG4gICAgICAgIHRoaXMuX3BvcHVwRWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKFwicG9wdXBfb3BlbmVkXCIpO1xuICAgICAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKFwia2V5ZG93blwiLCB0aGlzLl9oYW5kbGVFc2NDbG9zZSk7XG4gICAgICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCB0aGlzLl9vdmVybGF5Q2xvc2UpO1xuXG4gICAgfVxuICAgIF9vdmVybGF5Q2xvc2UgPSAoZXZ0KSA9PiB7XG4gICAgICAgIGlmIChldnQudGFyZ2V0LmNsYXNzTGlzdC5jb250YWlucyhcInBvcHVwXCIpKSB7XG4gICAgICAgICAgICB0aGlzLmNsb3NlKCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgc2V0RXZlbnRMaXN0ZW5lcnMoKSB7XG4gICAgICAgIHRoaXMuX3BvcHVwRWxlbWVudFxuICAgICAgICAgICAgLnF1ZXJ5U2VsZWN0b3IoXCIucG9wdXBfX2Nsb3NlLWJ1dHRvblwiKVxuICAgICAgICAgICAgLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5jbG9zZSgpXG4gICAgICAgICAgICB9KTtcbiAgICB9XG5cbn0iLCJpbXBvcnQge1xuICAgIFBvcHVwXG59IGZyb20gXCIuL1BvcHVwXCI7XG5leHBvcnQgY2xhc3MgUG9wdXBXaXRoRm9ybSBleHRlbmRzIFBvcHVwIHtcbiAgICBjb25zdHJ1Y3RvcihQb3B1cFNlbGVjdG9yLCBzdWJtaXRIYW5kbGVyKSB7XG4gICAgICAgIHN1cGVyKFBvcHVwU2VsZWN0b3IpO1xuICAgICAgICB0aGlzLl9zdWJtaXRIYW5kbGVyID0gc3VibWl0SGFuZGxlcjtcbiAgICAgICAgdGhpcy5fZm9ybUVsZW1lbnQgPSB0aGlzLl9wb3B1cEVsZW1lbnQucXVlcnlTZWxlY3RvcignLnBvcHVwX19mb3JtJyk7XG4gICAgICAgIHRoaXMuX2lucHV0cyA9IFsuLi50aGlzLl9mb3JtRWxlbWVudC5xdWVyeVNlbGVjdG9yQWxsKFwiLmZvcm1fX2lucHV0XCIpXTs7XG4gICAgfVxuICAgIF9nZXRJbnB1dFZhbHVlcygpIHtcblxuICAgICAgICBjb25zdCBpbnB1dFZhbHVlcyA9IHt9XG4gICAgICAgIHRoaXMuX2lucHV0cy5mb3JFYWNoKChpbnB1dCkgPT4ge1xuICAgICAgICAgICAgaW5wdXRWYWx1ZXNbaW5wdXQubmFtZV0gPSBpbnB1dC52YWx1ZTtcbiAgICAgICAgfSlcbiAgICAgICAgcmV0dXJuIGlucHV0VmFsdWVzO1xuXG4gICAgfVxuICAgIHNldElucHV0VmFsdWVzKGRhdGEpIHtcbiAgICAgICAgdGhpcy5faW5wdXRzLmZvckVhY2goKGlucHV0KSA9PiB7XG4gICAgICAgICAgICBpbnB1dC52YWx1ZSA9IGRhdGFbaW5wdXQubmFtZV07XG4gICAgICAgIH0pO1xuICAgICAgICBjb25zb2xlLmxvZyh0aGlzLl9pbnB1dHMpXG4gICAgfVxuICAgIHNldEV2ZW50TGlzdGVuZXJzKCkge1xuICAgICAgICB0aGlzLl9mb3JtRWxlbWVudC5hZGRFdmVudExpc3RlbmVyKFwic3VibWl0XCIsIChlKSA9PiB7XG4gICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICB0aGlzLl9zdWJtaXRIYW5kbGVyKHRoaXMuX2dldElucHV0VmFsdWVzKCkpO1xuICAgICAgICAgICAgdGhpcy5jbG9zZSgpO1xuICAgICAgICB9KTtcbiAgICAgICAgc3VwZXIuc2V0RXZlbnRMaXN0ZW5lcnMoKTtcbiAgICB9XG4gICAgY2xvc2UgPSAoKSA9PiB7XG4gICAgICAgIHN1cGVyLmNsb3NlKClcbiAgICAgICAgdGhpcy5fZm9ybUVsZW1lbnQucmVzZXQoKTsgLy9yZXNldCB0aGUgZm9ybSB3aGVuIG9wZW5uaW5nIGFnYWluXG5cbiAgICB9XG59IiwiLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuLy8vLy8vLy8gU2VsZWN0b3JzIC8vLy8vLy8vLy8vXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5leHBvcnQgY29uc3QgcHJvZmlsZUZvcm0gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLmZvcm1cIik7XG5leHBvcnQgY29uc3QgcHJvZmlsZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIucHJvZmlsZVwiKTtcbmV4cG9ydCBjb25zdCBwcm9maWxlTmFtZSA9IHByb2ZpbGUucXVlcnlTZWxlY3RvcihcIi5wcm9maWxlX19uYW1lXCIpO1xuZXhwb3J0IGNvbnN0IHByb2ZpbGVQb3B1cCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIucG9wdXAtZWRpdC1wcm9maWxlXCIpO1xuZXhwb3J0IGNvbnN0IHByb2ZpbGVUaXRsZSA9IHByb2ZpbGUucXVlcnlTZWxlY3RvcihcIi5wcm9maWxlX190aXRsZVwiKTtcbmV4cG9ydCBjb25zdCBpbnB1dE5hbWUgPSBmb3JtLnF1ZXJ5U2VsZWN0b3IoXCIuZm9ybV9faW5wdXRbbmFtZT0nbmFtZSddXCIpO1xuZXhwb3J0IGNvbnN0IGlucHV0VGl0bGUgPSBmb3JtLnF1ZXJ5U2VsZWN0b3IoXCIuZm9ybV9faW5wdXRbbmFtZT0ndGl0bGUnXVwiKTtcbmV4cG9ydCBjb25zdCBjYXJkcyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuY2FyZHNcIik7XG5cblxuZXhwb3J0IGNvbnN0IGNhcmRMaXN0ID0gY2FyZHMucXVlcnlTZWxlY3RvcihcIi5jYXJkc19fbGlzdFwiKTtcbmV4cG9ydCBjb25zdCBwbGFjZVBvcHVwRm9ybSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIucG9wdXBfX2Zvcm0tdHlwZS1hZGQtcGxhY2VcIik7XG5leHBvcnQgY29uc3QgbmFtZSA9IHBsYWNlUG9wdXBGb3JtLnF1ZXJ5U2VsZWN0b3IoXCIuZm9ybV9faW5wdXQtdHlwZS1wbGFjZS1uYW1lXCIpO1xuZXhwb3J0IGNvbnN0IHBsYWNlVVJMID0gcGxhY2VQb3B1cEZvcm0ucXVlcnlTZWxlY3RvcihcIi5mb3JtX19pbnB1dC10eXBlLXBsYWNlLXVybFwiKTtcbmV4cG9ydCBjb25zdCBpbWdQcmV2aWV3ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5wb3B1cC1wcmV2XCIpO1xuZXhwb3J0IGNvbnN0IHBvcHVwUHJldmlld0ltZyA9IGltZ1ByZXZpZXcucXVlcnlTZWxlY3RvcihcIi5wb3B1cF9faW1hZ2VcIik7XG5leHBvcnQgY29uc3QgcG9wdXBQcmV2aWV3Q2FwdGlvbiA9IGltZ1ByZXZpZXcucXVlcnlTZWxlY3RvcihcIi5wb3B1cF9fY2FwdGlvblwiKTtcblxuXG5leHBvcnQgY29uc3QgcGxhY2VGb3JtID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5wb3B1cC1wbGFjZVwiKTtcbmV4cG9ydCBjb25zdCBjYXJkVGVtcGxhdGVTZWxlY3RvciA9IFwiI2NhcmQtdGVtcGxhdGVcIjtcblxuXG5leHBvcnQgY29uc3QgZWRpdFByb2ZpbGVCdXR0b24gPSBwcm9maWxlLnF1ZXJ5U2VsZWN0b3IoXCIucHJvZmlsZV9fZWRpdC1idXR0b25cIik7XG5leHBvcnQgY29uc3QgYWRkQ2FyZFBvcHVwID0gcHJvZmlsZS5xdWVyeVNlbGVjdG9yKFwiLnByb2ZpbGVfX2FkZC1idXR0b25cIik7XG5leHBvcnQgY29uc3QgY2xvc2VCdXR0b25zID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLnBvcHVwX19jbG9zZS1idXR0b24nKTtcbmV4cG9ydCBjb25zdCBhdmF0YXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLnByb2ZpbGVfX2ltYWdlLWNvbnRhaW5lclwiKTtcbmV4cG9ydCBjb25zdCBhdmF0YXJGb3JtID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5wb3B1cF9fZm9ybV90eXBlX2F2YXRhclwiKVxuXG5leHBvcnQgY29uc3QgaW5pdGlhbENhcmRzID0gW3tcbiAgICAgICAgbmFtZTogXCJZb3NlbWl0ZSBWYWxsZXlcIixcbiAgICAgICAgbGluazogXCJodHRwczovL2NvZGUuczMueWFuZGV4Lm5ldC93ZWItY29kZS95b3NlbWl0ZS5qcGdcIixcbiAgICB9LFxuICAgIHtcbiAgICAgICAgbmFtZTogXCJMYWtlIExvdWlzZVwiLFxuICAgICAgICBsaW5rOiBcImh0dHBzOi8vY29kZS5zMy55YW5kZXgubmV0L3dlYi1jb2RlL2xha2UtbG91aXNlLmpwZ1wiLFxuICAgIH0sXG4gICAge1xuICAgICAgICBuYW1lOiBcIkJhbGQgTW91bnRhaW5zXCIsXG4gICAgICAgIGxpbms6IFwiaHR0cHM6Ly9jb2RlLnMzLnlhbmRleC5uZXQvd2ViLWNvZGUvYmFsZC1tb3VudGFpbnMuanBnXCIsXG4gICAgfSxcbiAgICB7XG4gICAgICAgIG5hbWU6IFwiTGF0ZW1hclwiLFxuICAgICAgICBsaW5rOiBcImh0dHBzOi8vY29kZS5zMy55YW5kZXgubmV0L3dlYi1jb2RlL2xhdGVtYXIuanBnXCIsXG4gICAgfSxcbiAgICB7XG4gICAgICAgIG5hbWU6IFwiVmFub2lzZSBOYXRpb25hbCBQYXJrXCIsXG4gICAgICAgIGxpbms6IFwiaHR0cHM6Ly9jb2RlLnMzLnlhbmRleC5uZXQvd2ViLWNvZGUvdmFub2lzZS5qcGdcIixcbiAgICB9LFxuICAgIHtcbiAgICAgICAgbmFtZTogXCJMYWdvIGRpIEJyYWllc1wiLFxuICAgICAgICBsaW5rOiBcImh0dHBzOi8vY29kZS5zMy55YW5kZXgubmV0L3dlYi1jb2RlL2xhZ28uanBnXCIsXG4gICAgfSxcbl07IiwiY29uc3QgY3VzdG9tRmV0Y2ggPSAodXJsLCBoZWFkZXJzKSA9PiB7XG4gICAgcmV0dXJuIGZldGNoKHVybCwgaGVhZGVycylcbiAgICAgICAgLnRoZW4ocmVzID0+IHJlcy5vayA/IHJlcy5qc29uKCkgOiBQcm9taXNlLnJlamVjdChyZXMuc3RhdHVzVGV4dCkpLmNhdGNoKGVyciA9PiBjb25zb2xlLmxvZygpKVxuXG59XG5jbGFzcyBBcGkge1xuICAgIGNvbnN0cnVjdG9yKHtcbiAgICAgICAgYmFzZVVybCxcbiAgICAgICAgaGVhZGVyc1xuICAgIH0pIHtcbiAgICAgICAgdGhpcy5fYmFzZVVybCA9IGJhc2VVcmw7XG4gICAgICAgIHRoaXMuX2hlYWRlcnMgPSBoZWFkZXJzO1xuICAgIH1cblxuXG4gICAgZ2V0SW5pdGlhbENhcmRzKCkge1xuICAgICAgICByZXR1cm4gY3VzdG9tRmV0Y2goYCR7dGhpcy5fYmFzZVVybH0vY2FyZHNgLCB7XG4gICAgICAgICAgICBoZWFkZXJzOiB0aGlzLl9oZWFkZXJzXG4gICAgICAgIH0pXG4gICAgfVxuICAgIGdldFVzZXJJbmZvKCkge1xuICAgICAgICByZXR1cm4gY3VzdG9tRmV0Y2goYCR7dGhpcy5fYmFzZVVybH0vdXNlcnMvbWVgLCB7XG4gICAgICAgICAgICBoZWFkZXJzOiB0aGlzLl9oZWFkZXJzXG4gICAgICAgIH0pXG4gICAgfVxuICAgIHNldFVzZXJJbmZvKHtcbiAgICAgICAgbmFtZSxcbiAgICAgICAgYWJvdXRcbiAgICB9KSB7XG4gICAgICAgIGNvbnNvbGUubG9nKCd0ZXN0Jywge1xuICAgICAgICAgICAgbmFtZSxcbiAgICAgICAgICAgIGFib3V0XG4gICAgICAgIH0pXG5cbiAgICAgICAgcmV0dXJuIGN1c3RvbUZldGNoKGAke3RoaXMuX2Jhc2VVcmx9L3VzZXJzL21lYCwge1xuICAgICAgICAgICAgaGVhZGVyczogdGhpcy5faGVhZGVycyxcbiAgICAgICAgICAgIG1ldGhvZDogXCJQQVRDSFwiLFxuICAgICAgICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkoe1xuICAgICAgICAgICAgICAgIG5hbWU6IG5hbWUsXG4gICAgICAgICAgICAgICAgYWJvdXQ6IGFib3V0LFxuICAgICAgICAgICAgfSksXG4gICAgICAgIH0pXG4gICAgfVxuICAgIGNyZWF0ZUNhcmQoZGF0YSkge1xuICAgICAgICByZXR1cm4gY3VzdG9tRmV0Y2goYCR7dGhpcy5fYmFzZVVybH0vY2FyZHNgLCB7XG4gICAgICAgICAgICBoZWFkZXJzOiB0aGlzLl9oZWFkZXJzLFxuICAgICAgICAgICAgbWV0aG9kOiAnUE9TVCcsXG4gICAgICAgICAgICBib2R5OiBKU09OLnN0cmluZ2lmeShkYXRhKVxuICAgICAgICB9KVxuXG4gICAgfVxuICAgIGRlbGV0ZUNhcmQoY2FyZElkKSB7XG4gICAgICAgIHJldHVybiBjdXN0b21GZXRjaChgJHt0aGlzLl9iYXNlVXJsfS9jYXJkcy8ke2NhcmRJZH1gLCB7XG4gICAgICAgICAgICBoZWFkZXJzOiB0aGlzLl9oZWFkZXJzLFxuICAgICAgICAgICAgbWV0aG9kOiAnREVMRVRFJyxcbiAgICAgICAgfSlcbiAgICB9XG4gICAgbGlrZUNhcmQoY2FyZElkKSB7XG4gICAgICAgIC8vIGNvbnNvbGUubG9nKGNhcmRJZClcbiAgICAgICAgcmV0dXJuIGN1c3RvbUZldGNoKGAke3RoaXMuX2Jhc2VVcmx9L2NhcmRzL2xpa2VzLyR7Y2FyZElkfWAsIHtcbiAgICAgICAgICAgIGhlYWRlcnM6IHRoaXMuX2hlYWRlcnMsXG4gICAgICAgICAgICBtZXRob2Q6ICdQVVQnLFxuICAgICAgICB9KVxuICAgIH1cblxuICAgIGRpc2xpa2VDYXJkKGNhcmRJZCkge1xuICAgICAgICByZXR1cm4gY3VzdG9tRmV0Y2goYCR7dGhpcy5fYmFzZVVybH0vY2FyZHMvbGlrZXMvJHtjYXJkSWR9YCwge1xuICAgICAgICAgICAgaGVhZGVyczogdGhpcy5faGVhZGVycyxcbiAgICAgICAgICAgIG1ldGhvZDogJ0RFTEVURScsXG4gICAgICAgIH0pXG4gICAgfVxuICAgIHNldFVzZXJBdmF0YXIodXJsKSB7XG4gICAgICAgIHJldHVybiBjdXN0b21GZXRjaChgJHt0aGlzLl9iYXNlVXJsfS91c2Vycy9tZS9hdmF0YXJgLCB7XG4gICAgICAgICAgICBoZWFkZXJzOiB0aGlzLl9oZWFkZXJzLFxuICAgICAgICAgICAgbWV0aG9kOiBcIlBBVENIXCIsXG4gICAgICAgICAgICBib2R5OiBKU09OLnN0cmluZ2lmeSh7XG4gICAgICAgICAgICAgICAgYXZhdGFyOiB1cmwsXG4gICAgICAgICAgICB9KSxcbiAgICAgICAgfSlcbiAgICB9XG5cblxuICAgIC8vIG90aGVyIG1ldGhvZHMgZm9yIHdvcmtpbmcgd2l0aCB0aGUgQVBJXG59XG5cbmV4cG9ydCBjb25zdCBhcGkgPSBuZXcgQXBpKHtcbiAgICBiYXNlVXJsOiBcImh0dHBzOi8vYXJvdW5kLm5vbW9yZXBhcnRpZXMuY28vdjEvY29ob3J0LTMtZW5cIiwgLy9jb2hvcnQtMy1lblxuICAgIGhlYWRlcnM6IHtcbiAgICAgICAgYXV0aG9yaXphdGlvbjogXCJlZGRlM2E1Yy1iMzBkLTQwYjAtOTllOS02ZjcyZWU5NzZkZGZcIixcbiAgICAgICAgXCJDb250ZW50LVR5cGVcIjogXCJhcHBsaWNhdGlvbi9qc29uXCJcbiAgICB9XG59KTsiLCIvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4vLy8vLy8vLyBJTVBPUlRTIC8vLy8vLy8vLy8vLy8vLy9cbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5pbXBvcnQge1xuICBGb3JtVmFsaWRhdG9yXG59XG5mcm9tIFwiLi4vY29tcG9uZW50cy9Gb3JtVmFsaWRhdG9yLmpzXCI7XG5cbmltcG9ydCB7XG4gIENhcmRcbn0gZnJvbSBcIi4uL2NvbXBvbmVudHMvQ2FyZC5qc1wiO1xuaW1wb3J0IHtcbiAgUG9wdXBcbn1cbmZyb20gXCIuLi9jb21wb25lbnRzL1BvcHVwLmpzXCI7XG5pbXBvcnQge1xuICBQb3B1cFdpdGhGb3JtXG59XG5mcm9tIFwiLi4vY29tcG9uZW50cy9Qb3B1cFdpdGhGb3JtLmpzXCI7XG5pbXBvcnQge1xuICBQb3B1cFdpdGhTdWJtaXRcbn1cbmZyb20gXCIuLi9jb21wb25lbnRzL1BvcHVwV2l0aFN1Ym1pdFwiO1xuaW1wb3J0IHtcbiAgU2VjdGlvblxufSBmcm9tIFwiLi4vY29tcG9uZW50cy9TZWN0aW9uLmpzXCI7XG5cbmltcG9ydCB7XG4gIFVzZXJJbmZvXG59IGZyb20gXCIuLi9jb21wb25lbnRzL1VzZXJJbmZvLmpzXCI7XG5cblxuaW1wb3J0IFwiLi4vc3R5bGVzL2luZGV4LmNzc1wiO1xuaW1wb3J0IHtcbiAgUG9wdXBXaXRoSW1hZ2Vcbn0gZnJvbSBcIi4uL2NvbXBvbmVudHMvUG9wdXBXaXRoSW1hZ2UuanNcIjtcblxuaW1wb3J0IHtcbiAgcHJvZmlsZUZvcm0sXG4gIHByb2ZpbGUsXG4gIHByb2ZpbGVOYW1lLFxuICBwcm9maWxlUG9wdXAsXG4gIHByb2ZpbGVUaXRsZSxcbiAgaW5wdXROYW1lLFxuICBpbnB1dFRpdGxlLFxuICBjYXJkcyxcbiAgY2FyZFRlbXBsYXRlLFxuICBjYXJkTGlzdCxcbiAgcHJvZmlsZUVkaXQsXG4gIHBsYWNlUG9wdXBGb3JtLFxuICBuYW1lLFxuICBwbGFjZVVSTCxcbiAgaW1nUHJldmlldyxcbiAgcG9wdXBQcmV2aWV3SW1nLFxuICBwb3B1cFByZXZpZXdDYXB0aW9uLFxuICBwbGFjZUZvcm0sXG4gIGNhcmRUZW1wbGF0ZVNlbGVjdG9yLFxuICBlZGl0UHJvZmlsZUJ1dHRvbixcbiAgYWRkQ2FyZFBvcHVwLFxuICBjbG9zZUJ1dHRvbnMsXG4gIGluaXRpYWxDYXJkcyxcbiAgYXZhdGFyLFxuICBhdmF0YXJGb3JtLFxuXG59IGZyb20gXCIuLi91dGlscy9jb25zdGFudHNcIlxuaW1wb3J0IHtcbiAgYXBpXG59IGZyb20gXCIuLi9jb21wb25lbnRzL0FwaVwiXG5cblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbi8vLy8vLy8vIEFQSSAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIGNvbnNvbGUubG9nKGFwaSlcbmNvbnN0IHVzZXJJbmZvID0gbmV3IFVzZXJJbmZvKHtcbiAgbmFtZVNlbGVjdG9yOiBcIi5wcm9maWxlX19uYW1lXCIsXG4gIGpvYlNlbGVjdG9yOiBcIi5wcm9maWxlX190aXRsZVwiLFxuICBhdmF0YXJTZWxlY3RvcjogXCIucHJvZmlsZV9faW1hZ2VcIixcbn0pO1xuXG5jb25zdCBwbGFjZXNTZWN0aW9uID0gbmV3IFNlY3Rpb24oe1xuICAgIHJlbmRlcmVyOiByZW5kZXJDYXJkLFxuICB9LFxuICBcIi5jYXJkc19fbGlzdFwiXG4pO1xuXG5cbmxldCB1c2VySWQ7XG5Qcm9taXNlLmFsbChbYXBpLmdldEluaXRpYWxDYXJkcygpLCBhcGkuZ2V0VXNlckluZm8oKV0pXG4gIC50aGVuKChbY2FyZHMsIHVzZXJEYXRhXSkgPT4ge1xuICAgIHVzZXJJZCA9IHVzZXJEYXRhLl9pZDtcbiAgICBwbGFjZXNTZWN0aW9uLnJlbmRlckl0ZW1zKGNhcmRzKTtcbiAgICB1c2VySW5mby5zZXRVc2VySW5mbyh1c2VyRGF0YS5uYW1lLCB1c2VyRGF0YS5hYm91dCk7XG4gICAgY29uc29sZS5sb2codXNlckRhdGEpXG4gICAgdXNlckluZm8uc2V0VXNlckF2YXRhcih1c2VyRGF0YS5hdmF0YXIpO1xuICB9KVxuICAudGhlbigoKSA9PiB1c2VySW5mby5zZXRBdmF0YXJWaXNpYmxlKCkpXG4gIC5jYXRjaCgoZXJyKSA9PiBjb25zb2xlLmxvZyhlcnIpKTtcblxuXG5cblxuXG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4vLy8vLy8vLyBGb3JtIFZhbGlkdGF0aW9uIC8vLy8vLy8vLy8vLy8vLy9cbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5jb25zdCB2YWxpZGF0ZUNvbmZpZ3MgPSB7XG4gIGlucHV0U2VsZWN0b3I6IFwiLmZvcm1fX2lucHV0XCIsXG4gIHN1Ym1pdEJ1dHRvblNlbGVjdG9yOiBcIi5mb3JtX19idXR0b25cIixcbiAgaW5hY3RpdmVCdXR0b25DbGFzczogXCJmb3JtX19idXR0b25fZGlzYWJsZWRcIixcbiAgaW5wdXRFcnJvckNsYXNzOiBcImZvcm1fX2lucHV0LWVycm9yXCIsXG4gIGVycm9yQ2xhc3M6IFwiZm9ybV9faW5wdXQtZXJyb3JcIixcbn07XG5cbmNvbnN0IHByb2ZpbGVGb3JtVmFsaWRhdG9yID0gbmV3IEZvcm1WYWxpZGF0b3IoXG4gIHZhbGlkYXRlQ29uZmlncyxcbiAgcHJvZmlsZVBvcHVwXG4pO1xucHJvZmlsZUZvcm1WYWxpZGF0b3IuZW5hYmxlVmFsaWRhdGlvbigpO1xuXG5jb25zdCBhZGRGb3JtVmFsaWRhdG9yID0gbmV3IEZvcm1WYWxpZGF0b3IodmFsaWRhdGVDb25maWdzLCBwbGFjZUZvcm0pO1xuYWRkRm9ybVZhbGlkYXRvci5lbmFibGVWYWxpZGF0aW9uKCk7XG5cbmNvbnN0IGF2YXRhckZvcm1WYWxpZGF0b3IgPSBuZXcgRm9ybVZhbGlkYXRvcihcbiAgdmFsaWRhdGVDb25maWdzLFxuICBhdmF0YXJGb3JtXG4pO1xuYXZhdGFyRm9ybVZhbGlkYXRvci5lbmFibGVWYWxpZGF0aW9uKCk7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4vLy8vLy8vLyBQb3B1cCBjcmVhdGlvbiAvLy8vLy8vLy8vLy8vLy8vXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXG5cbmNvbnN0IGVkaXRQb3B1cCA9IG5ldyBQb3B1cFdpdGhGb3JtKFwiLnBvcHVwXCIsIChkYXRhKSA9PiB7XG4gIGNvbnNvbGUubG9nKCdkYXRhID0+JywgZGF0YSlcbiAgYXBpXG4gICAgLnNldFVzZXJJbmZvKHtcbiAgICAgIG5hbWU6IGRhdGEubmFtZSxcbiAgICAgIGFib3V0OiBkYXRhLmFib3V0XG4gICAgfSlcblxuICAgIC50aGVuKChyZXMpID0+IHtcbiAgICAgIHVzZXJJbmZvLmdldFVzZXJJbmZvKCk7XG4gICAgICB1c2VySW5mby5zZXRVc2VySW5mbyh7XG4gICAgICAgIG5hbWU6IHJlcy5uYW1lLFxuICAgICAgICBhYm91dDogcmVzLmFib3V0XG4gICAgICB9KVxuXG4gICAgICBlZGl0UG9wdXAuY2xvc2UoKTtcbiAgICB9KVxuICAgIC5jYXRjaCgoZXJyKSA9PiBjb25zb2xlLmxvZyhlcnIpKVxufSk7XG5lZGl0UG9wdXAuc2V0RXZlbnRMaXN0ZW5lcnMoKTtcblxuXG5jb25zdCBwb3B1cEFkZENhcmQgPSBuZXcgUG9wdXBXaXRoRm9ybShcIi5wb3B1cC1wbGFjZVwiLCAoZGF0YSkgPT4ge1xuICBhcGlcbiAgICAuY3JlYXRlQ2FyZChkYXRhKVxuICAgIC50aGVuKChyZXMpID0+IHtcbiAgICAgIHJlbmRlckNhcmQocmVzKTtcbiAgICAgIHBvcHVwQWRkQ2FyZC5jbG9zZSgpO1xuICAgIH0pXG4gICAgLmNhdGNoKChlcnIpID0+IGNvbnNvbGUubG9nKGVycikpXG59KTtcbnBvcHVwQWRkQ2FyZC5zZXRFdmVudExpc3RlbmVycygpO1xuXG5cbmNvbnN0IGF2YXRhclBvcHVwID0gbmV3IFBvcHVwV2l0aEZvcm0oXCIucG9wdXBfdHlwZV9hdmF0YXJcIiwgKGRhdGEpID0+IHtcbiAgLy8gYXZhdGFyUG9wdXAucmVuZGVyTG9hZGluZyh0cnVlLCBcIlNhdmluZyBhdmF0YXIuLi5cIik7XG4gIGFwaVxuICAgIC5zZXRVc2VyQXZhdGFyKGRhdGEubGluaylcbiAgICAudGhlbigocmVzKSA9PiB7XG4gICAgICB1c2VySW5mby5zZXRVc2VyQXZhdGFyKHJlcy5hdmF0YXIpO1xuICAgICAgYXZhdGFyUG9wdXAuY2xvc2UoKTtcbiAgICB9KVxuICAgIC5jYXRjaCgoZXJyKSA9PiBjb25zb2xlLmxvZyhlcnIpKVxuICAvLyAuZmluYWxseSgoKSA9PiBhdmF0YXJQb3B1cC5yZW5kZXJMb2FkaW5nKGZhbHNlKSk7XG59KTtcbmF2YXRhclBvcHVwLnNldEV2ZW50TGlzdGVuZXJzKCk7XG5jb25zdCBpbWFnZVBvcHVwID0gbmV3IFBvcHVwV2l0aEltYWdlKFwiLnBvcHVwLXByZXZcIik7XG5pbWFnZVBvcHVwLnNldEV2ZW50TGlzdGVuZXJzKCk7XG5cblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbi8vLy8vLy8vIGNhcmQgY3JlYXRpb24gLy8vLy8vLy8vLy8vLy8vL1xuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblxuY29uc3QgZGVsZXRlUG9wdXAgPSBuZXcgUG9wdXBXaXRoU3VibWl0KFwiLnBvcHVwLXR5cGUtZGVsZXRlLWNhcmRcIik7XG5kZWxldGVQb3B1cC5zZXRFdmVudExpc3RlbmVycygpO1xuXG5mdW5jdGlvbiBnZW5lcmF0ZUNhcmQoZGF0YSkge1xuICBjb25zdCBjYXJkID0gbmV3IENhcmQoXG4gICAgZGF0YSxcbiAgICBjYXJkVGVtcGxhdGVTZWxlY3Rvciwge1xuICAgICAgaGFuZGxlQ2FyZENsaWNrOiAoKSA9PiB7XG4gICAgICAgIGltYWdlUG9wdXAub3BlbihkYXRhLmxpbmssIGRhdGEubmFtZSk7XG5cbiAgICAgIH0sXG4gICAgICBoYW5kbGVDYXJkRGVsZXRlOiAoaWQpID0+IHtcbiAgICAgICAgZGVsZXRlUG9wdXAub3BlbigpO1xuXG4gICAgICAgIGRlbGV0ZVBvcHVwLnNldEFjdGlvbigoKSA9PiB7XG4gICAgICAgICAgLy8gc3VibWl0IG1vZGFsXG4gICAgICAgICAgYXBpXG4gICAgICAgICAgICAuZGVsZXRlQ2FyZChpZClcbiAgICAgICAgICAgIC50aGVuKChyZXMpID0+IHtcbiAgICAgICAgICAgICAgY2FyZC5yZW1vdmVDYXJkKCk7XG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgLnRoZW4oKCkgPT4ge1xuICAgICAgICAgICAgICBkZWxldGVQb3B1cC5jbG9zZSgpO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIC5jYXRjaCgoZXJyKSA9PiBjb25zb2xlLmxvZyhlcnIpKTtcbiAgICAgICAgfSk7XG4gICAgICB9LFxuICAgICAgaGFuZGxlTGlrZUNhcmQ6IChpZCkgPT4ge1xuICAgICAgICBjb25zdCBMaWtlZCA9IGNhcmQuaXNMaWtlZCgpO1xuICAgICAgICAvL2xpa2UgY2FyZFxuICAgICAgICBpZiAoIUxpa2VkKSB7XG4gICAgICAgICAgYXBpXG4gICAgICAgICAgICAubGlrZUNhcmQoaWQpXG4gICAgICAgICAgICAudGhlbigocmVzKSA9PiB7XG4gICAgICAgICAgICAgIGNhcmQubGlrZUNhcmQocmVzLmxpa2VzKTtcbiAgICAgICAgICAgICAgY29uc29sZS5sb2coJ3JlcycsIHJlcylcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAuY2F0Y2goKGVycikgPT4gY29uc29sZS5sb2coZXJyKSk7XG5cblxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vZGlzbGlrZSBjYXJkXG4gICAgICAgICAgYXBpXG4gICAgICAgICAgICAuZGlzbGlrZUNhcmQoaWQpXG4gICAgICAgICAgICAudGhlbigocmVzKSA9PiB7XG4gICAgICAgICAgICAgIGNhcmQuZGlzbGlrZUNhcmQocmVzLmxpa2VzKTtcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAuY2F0Y2goKGVycikgPT4gY29uc29sZS5sb2coZXJyKSk7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgfSxcbiAgICB1c2VySWRcbiAgKTtcbiAgY29uc3QgY2FyZEVsZW1lbnQgPSBjYXJkLmdlbmVyYXRlQ2FyZCgpO1xuICByZXR1cm4gY2FyZEVsZW1lbnQ7XG5cbn1cblxuXG5cbmZ1bmN0aW9uIHJlbmRlckNhcmQoZGF0YSkge1xuICBjb25zdCBlbGVtZW50ID0gZ2VuZXJhdGVDYXJkKGRhdGEpO1xuICBwbGFjZXNTZWN0aW9uLmFkZEl0ZW0oZWxlbWVudCk7XG59XG5cbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbi8vLy8vLy8vIEV2ZW50TGlzdGVuZXJzIC8vLy8vLy8vLy8vLy8vLy8vLy9cbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblxuXG5lZGl0UHJvZmlsZUJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKCkgPT4ge1xuICBjb25zdCBpbmZvID0gdXNlckluZm8uZ2V0VXNlckluZm8oKTtcbiAgZWRpdFBvcHVwLnNldElucHV0VmFsdWVzKGluZm8pO1xuICBwcm9maWxlRm9ybVZhbGlkYXRvci5lbmFibGVWYWxpZGF0aW9uKCk7XG4gIHByb2ZpbGVGb3JtVmFsaWRhdG9yLnRvZ2dsZUJ1dHRvbigpO1xuICBlZGl0UG9wdXAub3BlbigpO1xuXG59KTtcblxuYWRkQ2FyZFBvcHVwLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoKSA9PiB7XG4gIHBvcHVwQWRkQ2FyZC5vcGVuKCk7XG4gIGFkZEZvcm1WYWxpZGF0b3IucmVzZXRWYWxpZGF0aW9uKCk7XG5cbn0pO1xuYXZhdGFyLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoKSA9PiB7XG4gIGF2YXRhckZvcm1WYWxpZGF0b3IucmVzZXRWYWxpZGF0aW9uKCk7XG4gIGF2YXRhclBvcHVwLm9wZW4oKTtcbn0pOyIsImV4cG9ydCBjbGFzcyBVc2VySW5mbyB7XG4gICAgY29uc3RydWN0b3Ioe1xuICAgICAgICBuYW1lU2VsZWN0b3IsXG4gICAgICAgIGpvYlNlbGVjdG9yLFxuICAgICAgICBhdmF0YXJTZWxlY3RvclxuICAgIH0pIHtcbiAgICAgICAgdGhpcy5fcHJvZmlsZU5hbWUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKG5hbWVTZWxlY3Rvcik7XG4gICAgICAgIHRoaXMuX3Byb2ZpbGVKb2IgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGpvYlNlbGVjdG9yKTtcbiAgICAgICAgdGhpcy5fYXZhdGFyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihhdmF0YXJTZWxlY3Rvcik7XG5cbiAgICB9XG4gICAgZ2V0VXNlckluZm8oKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBuYW1lOiB0aGlzLl9wcm9maWxlTmFtZS50ZXh0Q29udGVudCxcbiAgICAgICAgICAgIGFib3V0OiB0aGlzLl9wcm9maWxlSm9iLnRleHRDb250ZW50LFxuICAgICAgICB9XG4gICAgfVxuICAgIHNldFVzZXJJbmZvKHtcbiAgICAgICAgbmFtZSxcbiAgICAgICAgYWJvdXRcbiAgICB9KSB7XG4gICAgICAgIHRoaXMuX3Byb2ZpbGVOYW1lLnRleHRDb250ZW50ID0gbmFtZTtcbiAgICAgICAgdGhpcy5fcHJvZmlsZUpvYi50ZXh0Q29udGVudCA9IGFib3V0O1xuICAgIH1cbiAgICBzZXRVc2VyQXZhdGFyKGF2YXRhcikgeyAvLyBoZXJlIGFkZHMgdGhlIGF2YXRhciB0byBET00gYWZ0ZXIgZmV0Y2hpbmcgZnJvbSBzZXJ2ZXJcbiAgICAgICAgdGhpcy5fYXZhdGFyLnNyYyA9IGF2YXRhcjtcbiAgICB9XG5cbiAgICBzZXRBdmF0YXJWaXNpYmxlKCkge1xuICAgICAgICB0aGlzLl9hdmF0YXIuc3R5bGUudmlzaWJpbGl0eSA9IFwidmlzaWJsZVwiO1xuICAgIH1cbn0iLCJleHBvcnQgY2xhc3MgU2VjdGlvbiB7XG4gICAgY29uc3RydWN0b3Ioe1xuICAgICAgICByZW5kZXJlclxuICAgIH0sIGNvbnRhaW5lclNlbGVjdG9yKSB7XG4gICAgICAgIC8vIHRoaXMuaXRlbXMgPSBpdGVtcztcbiAgICAgICAgdGhpcy5fcmVuZGVyZXIgPSByZW5kZXJlcjtcbiAgICAgICAgdGhpcy5fY29udGFpbmVyID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcihjb250YWluZXJTZWxlY3Rvcik7XG4gICAgfVxuICAgIHJlbmRlckl0ZW1zKGl0ZW1zKSB7XG4gICAgICAgIGl0ZW1zLmZvckVhY2goKGl0ZW0pID0+IHtcbiAgICAgICAgICAgIHRoaXMuX3JlbmRlcmVyKGl0ZW0pO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgYWRkSXRlbShpdGVtKSB7XG4gICAgICAgIHRoaXMuX2NvbnRhaW5lci5wcmVwZW5kKGl0ZW0pO1xuICAgIH1cbn0iLCJpbXBvcnQge1xuICAgIFBvcHVwXG59IGZyb20gXCIuL1BvcHVwXCI7XG5leHBvcnQgY2xhc3MgUG9wdXBXaXRoSW1hZ2UgZXh0ZW5kcyBQb3B1cCB7XG4gICAgY29uc3RydWN0b3IocG9wdXBTZWxlY3Rvcikge1xuICAgICAgICBzdXBlcihwb3B1cFNlbGVjdG9yKTtcbiAgICAgICAgdGhpcy5fcG9wdXBJbWFnZSA9IHRoaXMuX3BvcHVwRWxlbWVudC5xdWVyeVNlbGVjdG9yKFwiLnBvcHVwX19pbWFnZVwiKTtcbiAgICAgICAgdGhpcy5fcG9wdXBDYXB0aW9uID0gdGhpcy5fcG9wdXBFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXCIucG9wdXBfX2NhcHRpb25cIik7XG5cbiAgICB9XG4gICAgb3BlbihpbWFnZSwgdGV4dCkge1xuXG4gICAgICAgIHRoaXMuX3BvcHVwSW1hZ2Uuc3JjID0gaW1hZ2U7XG4gICAgICAgIHRoaXMuX3BvcHVwSW1hZ2UuYWx0ID0gYEEgdmlldyBvZiAke3RleHR9YDtcbiAgICAgICAgdGhpcy5fcG9wdXBDYXB0aW9uLnRleHRDb250ZW50ID0gdGV4dDtcbiAgICAgICAgc3VwZXIub3BlbigpO1xuICAgIH1cbn0iLCJpbXBvcnQge1xuICAgIFBvcHVwXG59IGZyb20gXCIuL1BvcHVwXCI7XG5cbmV4cG9ydCBjbGFzcyBQb3B1cFdpdGhTdWJtaXQgZXh0ZW5kcyBQb3B1cCB7XG4gICAgc2V0QWN0aW9uKGFjdGlvbikge1xuICAgICAgICB0aGlzLl9zdWJtaXRIYW5kbGVyID0gYWN0aW9uO1xuICAgIH1cblxuICAgIHNldEV2ZW50TGlzdGVuZXJzKCkge1xuICAgICAgICB0aGlzLl9wb3B1cEVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcInN1Ym1pdFwiLCAoZSkgPT4ge1xuICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgdGhpcy5fc3VibWl0SGFuZGxlcigpO1xuICAgICAgICB9KTtcbiAgICAgICAgc3VwZXIuc2V0RXZlbnRMaXN0ZW5lcnMoKTtcbiAgICB9XG59Il0sIm5hbWVzIjpbIkZvcm1WYWxpZGF0b3IiLCJjb25zdHJ1Y3RvciIsImNvbmZpZ3MiLCJmb3JtRWxlbWVudCIsInRoaXMiLCJfZm9ybSIsIl9pbnB1dFNlbGVjdG9yIiwiaW5wdXRTZWxlY3RvciIsIl9zdWJtaXRCdXR0b25TZWxlY3RvciIsInN1Ym1pdEJ1dHRvblNlbGVjdG9yIiwiX2luYWN0aXZlQnV0dG9uQ2xhc3MiLCJpbmFjdGl2ZUJ1dHRvbkNsYXNzIiwiX2lucHV0RXJyb3JDbGFzcyIsImlucHV0RXJyb3JDbGFzcyIsIl9lcnJvckNsYXNzIiwiZXJyb3JDbGFzcyIsIl9zaG93SW5wdXRFcnJvciIsImlucHV0IiwiZXJyb3JFbGVtZW50IiwicXVlcnlTZWxlY3RvciIsImlkIiwidGV4dENvbnRlbnQiLCJ2YWxpZGF0aW9uTWVzc2FnZSIsImNsYXNzTGlzdCIsImFkZCIsIl9oaWRlSW5wdXRFcnJvciIsInJlbW92ZSIsIl9jaGVja0lucHV0VmFsaWRpdHkiLCJ2YWxpZGl0eSIsInZhbGlkIiwiX2hhc1ZhbGlkSW5wdXRzIiwiX2lucHV0TGlzdCIsImV2ZXJ5IiwiX3NldEV2ZW50TGlzdGVuZXJzIiwiQXJyYXkiLCJmcm9tIiwicXVlcnlTZWxlY3RvckFsbCIsIl9idXR0b24iLCJ0b2dnbGVCdXR0b24iLCJmb3JFYWNoIiwiYWRkRXZlbnRMaXN0ZW5lciIsInJlc2V0VmFsaWRhdGlvbiIsImRpc2FibGVkIiwiZW5hYmxlVmFsaWRhdGlvbiIsImUiLCJwcmV2ZW50RGVmYXVsdCIsIkNhcmQiLCJkYXRhIiwic2VsZWN0b3IiLCJ1c2VySWQiLCJoYW5kbGVDYXJkQ2xpY2siLCJoYW5kbGVDYXJkRGVsZXRlIiwiaGFuZGxlTGlrZUNhcmQiLCJkb2N1bWVudCIsIl9zZWxlY3RvciIsImNvbnRlbnQiLCJjbG9uZU5vZGUiLCJfbGlrZUJ1dHRvbiIsIl9oYW5kbGVMaWtlQ2FyZCIsIl9pZCIsIl9pbWFnZSIsIl9oYW5kbGVDYXJkQ2xpY2siLCJfZGVsZXRlQnV0dG9uIiwiX2hhbmRsZUNhcmREZWxldGUiLCJfdGV4dCIsIm5hbWUiLCJfbGluayIsImxpbmsiLCJfdXNlcklkIiwiX293bmVySWQiLCJvd25lciIsIl9saWtlcyIsImxpa2VzIiwibGlrZUNhcmQiLCJuZXdMaWtlcyIsIl9saWtlQ291bnQiLCJsZW5ndGgiLCJkaXNsaWtlQ2FyZCIsImlzTGlrZWQiLCJzb21lIiwibGlrZSIsInJlbW92ZUNhcmQiLCJfZWxlbWVudCIsImdlbmVyYXRlQ2FyZCIsIl9nZXRDbG9uZUZyb21UZW1wbGF0ZSIsInNyYyIsImFsdCIsInN0eWxlIiwiZGlzcGxheSIsIlBvcHVwIiwicG9wdXBTZWxlY3RvciIsImV2dCIsImtleSIsImNsb3NlIiwidGFyZ2V0IiwiY29udGFpbnMiLCJfcG9wdXBFbGVtZW50IiwiYmluZCIsIm9wZW4iLCJfaGFuZGxlRXNjQ2xvc2UiLCJfb3ZlcmxheUNsb3NlIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsInNldEV2ZW50TGlzdGVuZXJzIiwiUG9wdXBXaXRoRm9ybSIsIlBvcHVwU2VsZWN0b3IiLCJzdWJtaXRIYW5kbGVyIiwic3VwZXIiLCJfZm9ybUVsZW1lbnQiLCJyZXNldCIsIl9zdWJtaXRIYW5kbGVyIiwiX2lucHV0cyIsIl9nZXRJbnB1dFZhbHVlcyIsImlucHV0VmFsdWVzIiwidmFsdWUiLCJzZXRJbnB1dFZhbHVlcyIsImNvbnNvbGUiLCJsb2ciLCJwcm9maWxlIiwicHJvZmlsZVBvcHVwIiwicGxhY2VQb3B1cEZvcm0iLCJmb3JtIiwiaW1nUHJldmlldyIsInBsYWNlRm9ybSIsImVkaXRQcm9maWxlQnV0dG9uIiwiYWRkQ2FyZFBvcHVwIiwiYXZhdGFyIiwiYXZhdGFyRm9ybSIsImN1c3RvbUZldGNoIiwidXJsIiwiaGVhZGVycyIsImZldGNoIiwidGhlbiIsInJlcyIsIm9rIiwianNvbiIsIlByb21pc2UiLCJyZWplY3QiLCJzdGF0dXNUZXh0IiwiY2F0Y2giLCJlcnIiLCJhcGkiLCJiYXNlVXJsIiwiX2Jhc2VVcmwiLCJfaGVhZGVycyIsImdldEluaXRpYWxDYXJkcyIsImdldFVzZXJJbmZvIiwic2V0VXNlckluZm8iLCJhYm91dCIsIm1ldGhvZCIsImJvZHkiLCJKU09OIiwic3RyaW5naWZ5IiwiY3JlYXRlQ2FyZCIsImRlbGV0ZUNhcmQiLCJjYXJkSWQiLCJzZXRVc2VyQXZhdGFyIiwiYXV0aG9yaXphdGlvbiIsInVzZXJJbmZvIiwibmFtZVNlbGVjdG9yIiwiam9iU2VsZWN0b3IiLCJhdmF0YXJTZWxlY3RvciIsIl9wcm9maWxlTmFtZSIsIl9wcm9maWxlSm9iIiwiX2F2YXRhciIsInNldEF2YXRhclZpc2libGUiLCJ2aXNpYmlsaXR5IiwicGxhY2VzU2VjdGlvbiIsImNvbnRhaW5lclNlbGVjdG9yIiwicmVuZGVyZXIiLCJfcmVuZGVyZXIiLCJfY29udGFpbmVyIiwicmVuZGVySXRlbXMiLCJpdGVtcyIsIml0ZW0iLCJhZGRJdGVtIiwicHJlcGVuZCIsInJlbmRlckNhcmQiLCJhbGwiLCJjYXJkcyIsInVzZXJEYXRhIiwidmFsaWRhdGVDb25maWdzIiwicHJvZmlsZUZvcm1WYWxpZGF0b3IiLCJhZGRGb3JtVmFsaWRhdG9yIiwiYXZhdGFyRm9ybVZhbGlkYXRvciIsImVkaXRQb3B1cCIsInBvcHVwQWRkQ2FyZCIsImF2YXRhclBvcHVwIiwiaW1hZ2VQb3B1cCIsIl9wb3B1cEltYWdlIiwiX3BvcHVwQ2FwdGlvbiIsImltYWdlIiwidGV4dCIsImRlbGV0ZVBvcHVwIiwic2V0QWN0aW9uIiwiYWN0aW9uIiwiZWxlbWVudCIsImNhcmQiLCJpbmZvIl0sInNvdXJjZVJvb3QiOiIifQ==